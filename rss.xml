<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Beach Pig Rump &amp; Thigh</title><link>https://necromuralist.github.io/Beach-Pig-Thigh/</link><description>A Monkey Works With Nikola.</description><atom:link href="https://necromuralist.github.io/Beach-Pig-Thigh/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2023 &lt;a href="mailto:cloisteredmonkey.jmark@slmail.me"&gt;The Cloistered Monkey&lt;/a&gt; 
&lt;div id="license"xmlns:cc="http://creativecommons.org/ns#" &gt;This work is licensed under
&lt;a href="http://creativecommons.org/licenses/by/4.0/?ref=chooser-v1" target="_blank" rel="license noopener noreferrer" style="display:inline-block;"&gt;CC BY 4.0
&lt;img src="https://mirrors.creativecommons.org/presskit/icons/cc.svg?ref=chooser-v1"&gt;
&lt;img src="https://mirrors.creativecommons.org/presskit/icons/by.svg?ref=chooser-v1"&gt;&lt;/a&gt;
&lt;/div&gt;
</copyright><lastBuildDate>Sat, 11 Nov 2023 00:23:00 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Jinja Math Helper</title><link>https://necromuralist.github.io/Beach-Pig-Thigh/posts/jinja-math-helper/index.html</link><dc:creator>The Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Beach-Pig-Thigh/posts/jinja-math-helper/index.html#org46a5751"&gt;What This Is&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Beach-Pig-Thigh/posts/jinja-math-helper/index.html#org8db9fef"&gt;The Macros&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Beach-Pig-Thigh/posts/jinja-math-helper/index.html#orgba06bb7"&gt;Pseudocode Macros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Beach-Pig-Thigh/posts/jinja-math-helper/index.html#org24e7b74"&gt;Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Beach-Pig-Thigh/posts/jinja-math-helper/index.html#org0a92835"&gt;Style&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Beach-Pig-Thigh/posts/jinja-math-helper/index.html#orgc5bf722"&gt;The Math Scripts Macro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Beach-Pig-Thigh/posts/jinja-math-helper/index.html#orgdc94010"&gt;Pseudocode Additional Config&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Beach-Pig-Thigh/posts/jinja-math-helper/index.html#org442884b"&gt;The Post Checkers&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Beach-Pig-Thigh/posts/jinja-math-helper/index.html#org3eeb0c2"&gt;Math Scripts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Beach-Pig-Thigh/posts/jinja-math-helper/index.html#org14a5f22"&gt;Math Styles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Beach-Pig-Thigh/posts/jinja-math-helper/index.html#org834136f"&gt;The Race Condition&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org46a5751" class="outline-2"&gt;
&lt;h2 id="org46a5751"&gt;What This Is&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org46a5751"&gt;
&lt;p&gt;
In one of my Nikola sites (&lt;a href="https://necromuralist.github.io/Bowling-For-Data/"&gt;Bowling For Data&lt;/a&gt;) I wanted a simpler way to use &lt;a href="https://github.com/SaswatPadhi/pseudocode.js"&gt;pseudocode.js&lt;/a&gt; in posts (simpler than having to always insert the CDN URLs into the HTML) so I thought I'd copy what the &lt;code&gt;.. has_math:&lt;/code&gt; metadata flag does, but it turns out to involve more code than I was hoping to need so I instead copied over the math template and hacked in what I needed. 
&lt;/p&gt;

&lt;p&gt;
I wanted to use it in a repository I'm starting up (&lt;a href="https://necromuralist.github.io/Terribilis-Ludum/"&gt;Terribilis Ludum&lt;/a&gt;) so I copied the hacked template over to it but I couldn't get it to work. Then I realized that &lt;i&gt;Bowling For Data&lt;/i&gt; is using &lt;a href="https://www.makotemplates.org/"&gt;mako&lt;/a&gt; while I had set up &lt;i&gt;Terribilis Ludum&lt;/i&gt; for &lt;a href="https://jinja.palletsprojects.com/en/3.1.x/"&gt;Jinja&lt;/a&gt; so I was going to have to re-do it. I find Jinja harder to understand than Mako, partly because their documentation is sparse (and just one long document) but also because Mako uses python-ish syntax while Jinja… doesn't. But I suppose it's a good idea to have both, so here's the Jinja version.
&lt;/p&gt;

&lt;p&gt;
I was thinking it'd be better to make a separate template instead of replicng the &lt;code&gt;math_helper.tmpl&lt;/code&gt;, but it gets called in the index page template so I'd have to hack that up too, which seemed like too much bother, especially since I don't really know what everything is doing in there.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org8db9fef" class="outline-2"&gt;
&lt;h2 id="org8db9fef"&gt;The Macros&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org8db9fef"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgba06bb7" class="outline-3"&gt;
&lt;h3 id="orgba06bb7"&gt;Pseudocode Macros&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgba06bb7"&gt;
&lt;p&gt;
These define the macros to insert the pseudocode scripts into the HTML.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org24e7b74" class="outline-3"&gt;
&lt;h3 id="org24e7b74"&gt;Code&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org24e7b74"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;macro&lt;/span&gt; &lt;span class="nv"&gt;pseudocode&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/pseudocode@2.4.1/build/pseudocode.min.css"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endmacro&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This is the current pseudocode.js version (as of October 11, 2023). There is also an URL that
is just "latest" but the pseudocode.js documentation says that it isn't always up to date so thtis will require periodically checking on the version as time goes on if keeping up to date makes some kind of version.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0a92835" class="outline-3"&gt;
&lt;h3 id="org0a92835"&gt;Style&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org0a92835"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;macro&lt;/span&gt; &lt;span class="nv"&gt;code_styles&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/pseudocode@2.4.1/build/pseudocode.min.js"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endmacro&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc5bf722" class="outline-3"&gt;
&lt;h3 id="orgc5bf722"&gt;The Math Scripts Macro&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgc5bf722"&gt;
&lt;p&gt;
This is the macro that configures &lt;a href="https://www.mathjax.org/"&gt;MathJax&lt;/a&gt;. I tried changing it to MathJax 3 but the rendering went a little cuckoo so I had to go back to 2.7.5 like in the original.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;macro&lt;/span&gt; &lt;span class="nv"&gt;math_scripts&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_HTMLorMML"&lt;/span&gt; &lt;span class="na"&gt;integrity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"sha384-3lJUsx1TJHt7BA4udB5KPnDrlkO8T6J6v/op7ui0BbCjvZ9WqV4Xm6DTP6kQ/iBH"&lt;/span&gt; &lt;span class="na"&gt;crossorigin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"anonymous"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;mathjax_config&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;mathjax_config&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
  &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text/x-mathjax-config"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;MathJax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Hub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
	tex2jax: {
	    inlineMath: [['$','$'], ['\\(','\\)']],
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
I did change the &lt;code&gt;inlineMath&lt;/code&gt; dollar sign - the original had the word "latex" after the dollar sign, I guess so it doesn't mess up cases where you want actual dollar signs on the same line.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgdc94010" class="outline-3"&gt;
&lt;h3 id="orgdc94010"&gt;Pseudocode Additional Config&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgdc94010"&gt;
&lt;p&gt;
This is extra configuration stuff I added. I suppose this could (maybe should) go into the &lt;code&gt;conf.py&lt;/code&gt; file. Maybe I'll change it later.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;	displayMath: [['$$','$$'], ['\\[','\\]']],
	processEscapes: true,
	processEnvironments: true,
    }
});
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
And this is just to close out the macro.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endmacro&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
There was also a "math styles" macro but it only seemed to apply to katex and since I'm using MathJax I got rid of it.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org442884b" class="outline-2"&gt;
&lt;h2 id="org442884b"&gt;The Post Checkers&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org442884b"&gt;
&lt;p&gt;
These are the macros that get called in the index templates to check if the page needs the math rendering code.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org3eeb0c2" class="outline-3"&gt;
&lt;h3 id="org3eeb0c2"&gt;Math Scripts&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org3eeb0c2"&gt;
&lt;p&gt;
If the &lt;code&gt;has_pseudocode&lt;/code&gt; flag is set I'm calling the &lt;code&gt;math_scripts&lt;/code&gt; in the later macros that add the CSS because they insert stuff into the head of the HTML, not the body. This seems to help a little with getting the math in the pseudocode to render when the page is cached by the browser.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org1a5eef7" class="outline-4"&gt;
&lt;h4 id="org1a5eef7"&gt;Math Scripts If Post&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org1a5eef7"&gt;
&lt;p&gt;
This first chunk runs if the post has &lt;code&gt;.. has_math: true&lt;/code&gt; in the metadata. It's calling the &lt;code&gt;math_scripts&lt;/code&gt; macro from the prior section.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;macro&lt;/span&gt; &lt;span class="nv"&gt;math_scripts_ifpost&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;post&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
  &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;post.has_math&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
   &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;math_scripts&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
I added this next part for the pseudocode. I didn't build code to make a proper metadata setting for pseudocode so unlike the previous chunk which is able to check &lt;code&gt;if post.has_math&lt;/code&gt; I'm checking the post.meta object for the string "has_pseudocode". So as long as the post metadata has &lt;code&gt;.. has_pseudocode: &amp;lt;any text&amp;gt;&lt;/code&gt; it will put in the math and pseudocode.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="nv"&gt;post.meta&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"has_pseudocode"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
  &lt;span class="c"&gt;{# the call to math_scripts is in the CSS macros to put it in the HEAD #}&lt;/span&gt;
  &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;pseudocode&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
And here's the end of the macro.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endmacro&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc90f62a" class="outline-4"&gt;
&lt;h4 id="orgc90f62a"&gt;Math Scripts If Posts&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgc90f62a"&gt;
&lt;p&gt;
This macro is like the previous one except it gets used when on the default page which has the latest several posts displayed on it so we need to check if any of the posts has the metadata requesting math or pseudocode and only insert them once, even if multiple posts use them.
&lt;/p&gt;

&lt;p&gt;
This came from nikola.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;macro&lt;/span&gt; &lt;span class="nv"&gt;math_scripts_ifposts&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;posts&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;posts&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;selectattr&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"has_math"&lt;/span&gt;&lt;span class="o"&gt;)|&lt;/span&gt;&lt;span class="nf"&gt;list&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
      &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;math_scripts&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
I added this next section to get the pseudocode into the page. Since &lt;code&gt;mako&lt;/code&gt; uses python syntax I could do it as a generator comprehension in one line in the other version, but I couldn't figure out how to do it with Jinja so I used a for-loop. It doesn't add a lot of extra code but there were two things that seemed unusual. One is that you can't break out of the for-loop so I needed a variable to check if I've already set up MathJax and pseudocode.js. The other is that for some reason Jinja's variables are by default local to the for-loop, you can't access anything declared outside of it and thus I needed to  use the &lt;code&gt;namespace&lt;/code&gt; function which makes it so you can use the object &lt;code&gt;not_yet&lt;/code&gt; in the loop, which is what I used to check that we only call the &lt;code&gt;math_scripts&lt;/code&gt; and &lt;code&gt;pseudocode&lt;/code&gt; macros once.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
      &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;not_yet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;namespace&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;set_up&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
      &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;post&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;posts&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
	&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;post.meta&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"has_pseudocode"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;not_yet.set_up&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
	  &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;pseudocode&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
	  &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;not_yet.set_up&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
	&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
      &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endmacro&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org14a5f22" class="outline-3"&gt;
&lt;h3 id="org14a5f22"&gt;Math Styles&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org14a5f22"&gt;
&lt;p&gt;
This is like the previous two sections except it inserts the CSS. This gets put into the head while the scripts get put into the body of the posts.
According to &lt;a href="https://stackoverflow.com/a/2451441"&gt;StackOverflow&lt;/a&gt; putting javascript in the HEAD can block loading so javascript should go at the bottom. Is that what my P5 template is doing? I'll need to look into that.
&lt;/p&gt;

&lt;p&gt;
It might be the reason that MathJax isn't rendering until I refresh the page sometimes, though, so I use it to insert MathJax into the HTML head when putting in pseudocode.js.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org2157dac" class="outline-4"&gt;
&lt;h4 id="org2157dac"&gt;Math Styles If Post&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org2157dac"&gt;
&lt;p&gt;
Since I got rid of the math-style macro this just loads the pseudocode styling (if it's needed).
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;macro&lt;/span&gt; &lt;span class="nv"&gt;math_styles_ifpost&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;post&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;post.meta&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"has_pseudocode"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
      &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;math_scripts&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
      &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;code_styles&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endmacro&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org311cab5" class="outline-4"&gt;
&lt;h4 id="org311cab5"&gt;Math Styles If Posts&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org311cab5"&gt;
&lt;p&gt;
And this is for the case where there are multiple posts on a page.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;macro&lt;/span&gt; &lt;span class="nv"&gt;math_styles_ifposts&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;posts&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
  &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;not_yet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;namespace&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;set_up&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
  &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;post&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;posts&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;post.meta&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"has_pseudocode"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;not_yet.set_up&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
      &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;math_scripts&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
      &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;code_styles&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
      &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;not_yet.set_up&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
  &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endmacro&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org834136f" class="outline-2"&gt;
&lt;h2 id="org834136f"&gt;The Race Condition&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org834136f"&gt;
&lt;p&gt;
There appears to be a race condition problem that happens sometimes if I reload the page too many times.(&lt;a href="https://github.com/mathjax/MathJax/issues/1805#issuecomment-314433504"&gt;https://github.com/mathjax/MathJax/issues/1805#issuecomment-314433504&lt;/a&gt;). It prevents the math being completely rendered in the pseudocode (it converts the inline symbol (slash right-parethesis) to dollar signs, so it's doing something, but it leaves the rest of the latex as is). It can be fixed by clearing the cache but I decided to try and work around it a little.
&lt;/p&gt;

&lt;p&gt;
It only affects the pseudocode so I moved the loading of the &lt;code&gt;math_scripts&lt;/code&gt; into the styles macros because they insert it into the head and not the body (which mathjax says is preferred anyway). It doesn't bother the pseudocode to be in the body so I'm leaving it there.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>jinja</category><category>math</category><category>pseudocode</category><category>template</category><guid>https://necromuralist.github.io/Beach-Pig-Thigh/posts/jinja-math-helper/index.html</guid><pubDate>Mon, 09 Oct 2023 23:30:02 GMT</pubDate></item><item><title>Orgmode Plugin init.el</title><link>https://necromuralist.github.io/Beach-Pig-Thigh/posts/orgmode-plugin-initel/index.html</link><dc:creator>The Cloistered Monkey</dc:creator><description>&lt;p&gt;
This is the emacs configuration (&lt;code&gt;init.el&lt;/code&gt;) for the &lt;a href="https://plugins.getnikola.com/v8/orgmode/"&gt;orgmode plugin&lt;/a&gt; to export posts and pages to HTML. I spent forever messing with the &lt;code&gt;init.el&lt;/code&gt; file for my emacs instance, but it turns out that the plugin has its own configuration so you have to make changes here or they won't matter.
&lt;/p&gt;

&lt;div id="outline-container-org4827fda" class="outline-2"&gt;
&lt;h2 id="org4827fda"&gt;Pygments&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org4827fda"&gt;
&lt;p&gt;
This is the list of languages that pygments will colorize when source-code blocks are exported. The org-babel documentation has a &lt;a href="https://orgmode.org/worg/org-contrib/babel/languages/index.html"&gt;list of supported&lt;/a&gt; languages, but it doesn't list &lt;code&gt;fish&lt;/code&gt;, although that seems to work. It might be because I inserted fish-mode, or maybe it just has to be a &lt;a href="https://pygments.org/languages/"&gt;supported pygments language&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
The first argument is what you put as the type in the source block and the second is the pygments short-name &lt;code&gt;("org-source-name" . "pygments-name")&lt;/code&gt;.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgbd0c548" class="outline-3"&gt;
&lt;h3 id="orgbd0c548"&gt;Fish&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgbd0c548"&gt;
&lt;p&gt;
Add coloring for the fish-shell. 
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"fish"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"fish"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; color_test
  &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"colorize me"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org29735a6" class="outline-3"&gt;
&lt;h3 id="org29735a6"&gt;Gherkin&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org29735a6"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"gherkin"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"gherkin"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;Scenario:&lt;/span&gt;&lt;span class="nf"&gt; Gherkin colorization&lt;/span&gt;

&lt;span class="nf"&gt;Feature: Pygments gherkin colorization&lt;/span&gt;

&lt;span class="k"&gt;Given &lt;/span&gt;&lt;span class="nf"&gt;a gherkin feature file&lt;/span&gt;
&lt;span class="k"&gt;When &lt;/span&gt;&lt;span class="nf"&gt;the org-mode file is exported to HTML&lt;/span&gt;
&lt;span class="k"&gt;Then &lt;/span&gt;&lt;span class="nf"&gt;the feature fragment is colorized.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgd4f625e" class="outline-3"&gt;
&lt;h3 id="orgd4f625e"&gt;HTML&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgd4f625e"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"html"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"html"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Colorize HTML&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org461bf3a" class="outline-3"&gt;
&lt;h3 id="org461bf3a"&gt;Jinja&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org461bf3a"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"jinja"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"html+jinja"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;macro&lt;/span&gt; &lt;span class="nv"&gt;pseudocode&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/pseudocode@latest/build/pseudocode.min.js"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endmacro&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgbf6ba87" class="outline-3"&gt;
&lt;h3 id="orgbf6ba87"&gt;Mako&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgbf6ba87"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"mako"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"html+mako"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt;&lt;span class="nb"&gt;def&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"pseudocode()"&lt;/span&gt;&lt;span class="cp"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/pseudocode@latest/build/pseudocode.min.js"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;/%&lt;/span&gt;&lt;span class="nb"&gt;def&lt;/span&gt;&lt;span class="cp"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7d2ea6f" class="outline-2"&gt;
&lt;h2 id="org7d2ea6f"&gt;Lazy Image Loading&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org7d2ea6f"&gt;
&lt;p&gt;
This adds &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Performance/Lazy_loading"&gt;Lazy Loading&lt;/a&gt; to the HTML image tags.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;;; Export images with lazy link type&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;org-custom-link-img-url-export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;desc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;cond&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;eq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;'html&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;img src=\"%s\" alt=\"%s\" loading=\"lazy\" /&amp;gt;"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;desc&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;org-add-link-type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"lazy-img-url"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;'org-custom-link-img-url-export&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This is supposed to let the browser know that it doesn't have to load the image until it's within view of the user. Here's an example hosted on pCloud.
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://filedn.com/lKA05W1iHns4eTWccSVfpum/majority-element/majority-element-panel-001-002-unscaled.png" alt="Majority-Item Panels 1 &amp;amp; 2" loading="lazy"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org37729a9" class="outline-2"&gt;
&lt;h2 id="org37729a9"&gt;The Tangle&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org37729a9"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;;; Init file to use with the orgmode plugin.&lt;/span&gt;

&lt;span class="c1"&gt;;; this is generated from the post with the slug: orgmode-plugin-initel&lt;/span&gt;

&lt;span class="c1"&gt;;; Load org-mode&lt;/span&gt;
&lt;span class="c1"&gt;;; Requires org-mode v8.x&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;require&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;'package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;package-load-list&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;htmlize&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;package-initialize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;require&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;'org&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;require&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;'ox-html&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;;;; Custom configuration for the export.&lt;/span&gt;

&lt;span class="c1"&gt;;;; Add any custom configuration that you would like to 'conf.el'.&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;nikola-use-pygments&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;t&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nv"&gt;org-export-with-toc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;nil&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nv"&gt;org-export-with-section-numbers&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;nil&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nv"&gt;org-startup-folded&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;'showeverything&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;;; Load additional configuration from conf.el&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;conf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;expand-file-name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"conf.el"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;file-name-directory&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;load-file-name&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;file-exists-p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;conf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;load-file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;conf&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="c1"&gt;;;; Macros&lt;/span&gt;

&lt;span class="c1"&gt;;; Load Nikola macros&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;nikola-macro-templates&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;with-current-buffer&lt;/span&gt;
&lt;span class="w"&gt;	  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;find-file&lt;/span&gt;
&lt;span class="w"&gt;	   &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;expand-file-name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"macros.org"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;file-name-directory&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;load-file-name&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="w"&gt;	&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;org-macro--collect-macros&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="c1"&gt;;;; Code highlighting&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;org-html-decode-plain-text&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;"Convert HTML character to plain TEXT. i.e. do the inversion of&lt;/span&gt;
&lt;span class="s"&gt;     `org-html-encode-plain-text`. Possible conversions are set in&lt;/span&gt;
&lt;span class="s"&gt;     `org-html-protect-char-alist'."&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mapc&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;text&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;cdr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;car&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;text&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;reverse&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;org-html-protect-char-alist&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;;; Use pygments highlighting for code&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;pygmentize&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;lang&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;"Use Pygments to highlight the given code and return the output"&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;with-temp-buffer&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;insert&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;lang&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;or&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;cdr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;assoc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;lang&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;org-pygments-language-alist&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;shell-command-on-region&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;point-min&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;point-max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;			       &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"pygmentize -f html -l %s"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;lang&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;			       &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;buffer-name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;buffer-string&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defconst&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;org-pygments-language-alist&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;"asymptote"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"asymptote"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"awk"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"awk"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"c"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"c"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"console"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"console"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"c++"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"cpp"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"cpp"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"cpp"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"clojure"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"clojure"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"css"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"css"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"d"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"d"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"emacs-lisp"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"scheme"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"F90"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"fortran"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;&amp;lt;&amp;lt;fish-pygments&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;&amp;lt;&amp;lt;gherkin-pygments&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"gnuplot"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"gnuplot"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"groovy"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"groovy"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"haskell"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"haskell"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;&amp;lt;&amp;lt;html-pygments&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"java"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"java"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;&amp;lt;&amp;lt;jinja-pygments&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"js"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"js"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"julia"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"julia"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"latex"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"latex"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"lisp"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"lisp"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;&amp;lt;&amp;lt;mako-pygments&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"makefile"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"makefile"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"matlab"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"matlab"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"mscgen"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"mscgen"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ocaml"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"ocaml"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"octave"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"octave"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"perl"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"perl"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"picolisp"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"scheme"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"python"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"python"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"r"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"r"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ruby"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"ruby"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"sass"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"sass"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"scala"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"scala"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"scheme"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"scheme"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"sh"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"sh"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"shell-session"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"shell-session"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"sql"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"sql"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"sqlite"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"sqlite3"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"tcl"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"tcl"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;"Alist between org-babel languages and Pygments lexers.&lt;/span&gt;
&lt;span class="s"&gt;lang is downcased before assoc, so use lowercase to describe language available.&lt;/span&gt;
&lt;span class="s"&gt;See: http://orgmode.org/worg/org-contrib/babel/languages.html and&lt;/span&gt;
&lt;span class="s"&gt;http://pygments.org/docs/lexers/ for adding new languages to the mapping."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;;; Override the html export function to use pygments&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;org-html-src-block&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;src-block&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;contents&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;info&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;"Transcode a SRC-BLOCK element from Org to HTML.&lt;/span&gt;
&lt;span class="s"&gt;CONTENTS holds the contents of the item.  INFO is a plist holding&lt;/span&gt;
&lt;span class="s"&gt;contextual information."&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;org-export-read-attribute&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;:attr_html&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;src-block&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;:textarea&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;org-html--textarea-block&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;src-block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;lang&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;org-element-property&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;:language&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;src-block&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="w"&gt;	  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;code&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;org-element-property&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;:value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;src-block&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="w"&gt;	  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;code-html&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;org-html-format-code&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;src-block&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;info&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;nikola-use-pygments&lt;/span&gt;
&lt;span class="w"&gt;	  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;progn&lt;/span&gt;
&lt;span class="w"&gt;	    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;unless&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;lang&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;lang&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="w"&gt;	    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;pygmentize&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;downcase&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;lang&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;org-html-decode-plain-text&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;code&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="w"&gt;	&lt;/span&gt;&lt;span class="nv"&gt;code-html&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;

&lt;span class="c1"&gt;;; Export images with custom link type&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;org-custom-link-img-url-export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;desc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;cond&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;eq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;'html&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;img src=&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt; alt=&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt;/&amp;gt;"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;desc&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;org-add-link-type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"img-url"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;'org-custom-link-img-url-export&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;;; Export images with built-in file scheme&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;org-file-link-img-url-export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;desc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;cond&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;eq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;'html&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;img src=&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt;/%s&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt; alt=&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt;/&amp;gt;"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;desc&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;org-add-link-type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"file"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;'org-file-link-img-url-export&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;;; Support for magic links (link:// scheme)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;org-link-set-parameters&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;"link"&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;:export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;desc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;backend&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;	     &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;cond&lt;/span&gt;
&lt;span class="w"&gt;	       &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;eq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;'html&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;backend&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;		&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;a href=&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt;link:%s&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt;&amp;gt;%s&amp;lt;/a&amp;gt;"&lt;/span&gt;
&lt;span class="w"&gt;			&lt;/span&gt;&lt;span class="nv"&gt;path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;or&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;desc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;path&lt;/span&gt;&lt;span class="p"&gt;))))))&lt;/span&gt;

&lt;span class="nv"&gt;&amp;lt;&amp;lt;lazy-load-images&amp;gt;&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;;; Export function used by Nikola.&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;nikola-html-export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;infile&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;outfile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;"Export the body only of the input file and write it to&lt;/span&gt;
&lt;span class="s"&gt;specified location."&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;with-current-buffer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;find-file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;infile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;org-macro-replace-all&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;nikola-macro-templates&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;org-html-export-as-html&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;write-file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;outfile&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org3639005" class="outline-2"&gt;
&lt;h2 id="org3639005"&gt;Links&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org3639005"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Chaganti P. Plugins for Nikola. 2020 [cited 2023 Jun 25]. orgmode. Available from: &lt;a href="https://plugins.getnikola.com/v8/orgmode/"&gt;https://plugins.getnikola.com/v8/orgmode/&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;Babel: Languages [Internet]. [cited 2023 Jun 25]. Available from: &lt;a href="https://orgmode.org/worg/org-contrib/babel/languages/index.html"&gt;https://orgmode.org/worg/org-contrib/babel/languages/index.html&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;Languages — Pygments [Internet]. [cited 2023 Jun 25]. Available from: &lt;a href="https://pygments.org/languages/"&gt;https://pygments.org/languages/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>orgmode</category><category>plugins</category><guid>https://necromuralist.github.io/Beach-Pig-Thigh/posts/orgmode-plugin-initel/index.html</guid><pubDate>Mon, 26 Jun 2023 03:39:18 GMT</pubDate></item><item><title>Nikola Conf.py</title><link>https://necromuralist.github.io/Beach-Pig-Thigh/posts/nikola-confpy/index.html</link><dc:creator>The Cloistered Monkey</dc:creator><description>&lt;div id="outline-container-orge93e542" class="outline-2"&gt;
&lt;h2 id="orge93e542"&gt;Site Data&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge93e542"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Data about this site&lt;/span&gt;
&lt;span class="n"&gt;BLOG_AUTHOR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"The Cloistered Monkey"&lt;/span&gt;  &lt;span class="c1"&gt;# (translatable)&lt;/span&gt;
&lt;span class="n"&gt;BLOG_TITLE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Beach Pig Rump &amp;amp; Thigh"&lt;/span&gt;  &lt;span class="c1"&gt;# (translatable)&lt;/span&gt;
&lt;span class="c1"&gt;# This is the main URL for your site. It will be used&lt;/span&gt;
&lt;span class="c1"&gt;# in a prominent link. Don't forget the protocol (http/https)!&lt;/span&gt;
&lt;span class="n"&gt;SITE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"https://necromuralist.github.io/Beach-Pig-Thigh/"&lt;/span&gt;
&lt;span class="c1"&gt;# This is the URL where Nikola's output will be deployed.&lt;/span&gt;
&lt;span class="c1"&gt;# If not set, defaults to SITE_URL&lt;/span&gt;
&lt;span class="c1"&gt;# BASE_URL = "https://necromuralist.github.io/Bowling-For-Data/"&lt;/span&gt;
&lt;span class="n"&gt;BLOG_EMAIL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"cloisteredmonkey.jmark@slmail.me"&lt;/span&gt;
&lt;span class="n"&gt;BLOG_DESCRIPTION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"A Monkey Works With Nikola."&lt;/span&gt;  &lt;span class="c1"&gt;# (translatable)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org98bee22" class="outline-2"&gt;
&lt;h2 id="org98bee22"&gt;The Theme&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org98bee22"&gt;
&lt;p&gt;
This is how you choose the theme to use. We're using a custom theme so there's three things that have to match.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org84375b6" class="outline-3"&gt;
&lt;h3 id="org84375b6"&gt;The Theme Location&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org84375b6"&gt;
&lt;p&gt;
Next to the &lt;code&gt;conf.py&lt;/code&gt; file at the root of the nikola repository we need a folder named "themes" and inside that we put a folder whose name matches the name of our theme. I'm going to use &lt;code&gt;custom-mako&lt;/code&gt; as our example. The only other expected option at this point would be &lt;code&gt;custom-jinja&lt;/code&gt;. So our "themes" folder should look like this (more or less):
&lt;/p&gt;

&lt;pre class="example" id="orgfb5f595"&gt;
themes/
  custom-mako/
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgbdb2ec7" class="outline-3"&gt;
&lt;h3 id="orgbdb2ec7"&gt;The Theme Configuration&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgbdb2ec7"&gt;
&lt;p&gt;
Inside the &lt;code&gt;themes/custom-mako/&lt;/code&gt; folder we need a file with the name &lt;code&gt;custom-mako.theme&lt;/code&gt; - the base name of the file needs to match the name of our theme. This is where we tell nikola that we're using mako (or jinja as the case may be). Here's what's in it (the mako version).
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[Theme]
engine = mako
parent = bootstrap4
author = The Nikola Contributors
author_url = https://getnikola.com/
license = MIT
based_on = Bootstrap 4 &amp;lt;http://getbootstrap.com/&amp;gt;
tags = bootstrap

[Family]
family = bootstrap4
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgfd17f6a" class="outline-3"&gt;
&lt;h3 id="orgfd17f6a"&gt;The conf.py&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgfd17f6a"&gt;
&lt;p&gt;
Inside &lt;code&gt;conf.py&lt;/code&gt; we put the name of the theme, matching the name of the folder and configuration file.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Name of the theme to use.&lt;/span&gt;
&lt;span class="n"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"custom-mako"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgedf5558" class="outline-2"&gt;
&lt;h2 id="orgedf5558"&gt;Posts and Pages&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgedf5558"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgd530b97" class="outline-3"&gt;
&lt;h3 id="orgd530b97"&gt;Posts&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgd530b97"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;POSTS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"posts/*.org"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"post.tmpl"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"posts/*.rst"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"post.tmpl"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"posts/*.md"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"post.tmpl"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"posts/*.txt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"post.tmpl"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"posts/*.html"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"post.tmpl"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org718a9e4" class="outline-3"&gt;
&lt;h3 id="org718a9e4"&gt;Pages&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org718a9e4"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PAGES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"source/*.org"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"page.tmpl"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"source/*.rst"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"page.tmpl"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"source/*.md"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"page.tmpl"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"source/*.txt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"page.tmpl"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"source/*.html"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"page.tmpl"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgaacdce1" class="outline-3"&gt;
&lt;h3 id="orgaacdce1"&gt;The Index Path&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgaacdce1"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Final location for the main blog page and sibling paginated pages is&lt;/span&gt;
&lt;span class="c1"&gt;# output / TRANSLATION[lang] / INDEX_PATH / index-*.html&lt;/span&gt;
&lt;span class="c1"&gt;# (translatable)&lt;/span&gt;

&lt;span class="n"&gt;INDEX_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgf7a073c" class="outline-2"&gt;
&lt;h2 id="orgf7a073c"&gt;Navigation Links&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf7a073c"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;NAVIGATION_LINKS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;DEFAULT_LANG&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/posts/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Posts"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/archive.html"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Archive"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/categories/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Tags"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/rss.xml"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"RSS"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;
	    &lt;span class="p"&gt;(&lt;/span&gt;
		&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"https://necromuralist.github.io/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"The Cloistered Monkey"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
		&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"https://necromuralist.github.io/Ape-Iron/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Ape Iron"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
		&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"https://necromuralist.github.io/Bowling-For-Data/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Bowling For Data"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
		&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"https://necromuralist.github.io/Neurotic-Networking/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Neurotic Networking"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
		&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"https://necromuralist.github.io/Visions-Voices-Data/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Visions, Voices, Data"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
		&lt;span class="p"&gt;),&lt;/span&gt;
	    &lt;span class="s2"&gt;"Monkey Pages"&lt;/span&gt;
	&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org22de4a1" class="outline-2"&gt;
&lt;h2 id="org22de4a1"&gt;Github Deploy&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org22de4a1"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# github_deploy configuration&lt;/span&gt;
&lt;span class="c1"&gt;# For more details, read the manual:&lt;/span&gt;
&lt;span class="c1"&gt;# https://getnikola.com/handbook.html#deploying-to-github&lt;/span&gt;
&lt;span class="c1"&gt;# You will need to configure the deployment branch on GitHub.&lt;/span&gt;
&lt;span class="n"&gt;GITHUB_SOURCE_BRANCH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'main'&lt;/span&gt;
&lt;span class="n"&gt;GITHUB_DEPLOY_BRANCH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'gh-pages'&lt;/span&gt;

&lt;span class="c1"&gt;# The name of the remote where you wish to push to, using github_deploy.&lt;/span&gt;
&lt;span class="n"&gt;GITHUB_REMOTE_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'origin'&lt;/span&gt;

&lt;span class="c1"&gt;# Whether or not github_deploy should commit to the source branch automatically&lt;/span&gt;
&lt;span class="c1"&gt;# before deploying.&lt;/span&gt;
&lt;span class="n"&gt;GITHUB_COMMIT_SOURCE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt; &lt;span class="c1"&gt;# True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org23066b0" class="outline-2"&gt;
&lt;h2 id="org23066b0"&gt;The License&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org23066b0"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;LICENSE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'''&lt;/span&gt;
&lt;span class="s1"&gt;&amp;lt;div id="license"xmlns:cc="http://creativecommons.org/ns#" &amp;gt;This work is licensed under&lt;/span&gt;
&lt;span class="s1"&gt;&amp;lt;a href="http://creativecommons.org/licenses/by/4.0/?ref=chooser-v1" target="_blank" rel="license noopener noreferrer" style="display:inline-block;"&amp;gt;CC BY 4.0&lt;/span&gt;
&lt;span class="s1"&gt;&amp;lt;img src="https://mirrors.creativecommons.org/presskit/icons/cc.svg?ref=chooser-v1"&amp;gt;&lt;/span&gt;
&lt;span class="s1"&gt;&amp;lt;img src="https://mirrors.creativecommons.org/presskit/icons/by.svg?ref=chooser-v1"&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="s1"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="s1"&gt;'''&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgcd885d1" class="outline-2"&gt;
&lt;h2 id="orgcd885d1"&gt;The Footer&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgcd885d1"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;CONTENT_FOOTER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Scribbles by &amp;lt;a href="mailto:&lt;/span&gt;&lt;span class="si"&gt;{email}&lt;/span&gt;&lt;span class="s1"&gt;"&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{author}&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;/a&amp;gt; - Powered by         &amp;lt;a href="https://getnikola.com" rel="nofollow"&amp;gt;Nikola&amp;lt;/a&amp;gt;         &lt;/span&gt;&lt;span class="si"&gt;{license}&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgd79aa51" class="outline-2"&gt;
&lt;h2 id="orgd79aa51"&gt;Strip Indexes&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgd79aa51"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# If a link ends in /index.html,  drop the index.html part.&lt;/span&gt;
&lt;span class="c1"&gt;# http://mysite/foo/bar/index.html =&amp;gt; http://mysite/foo/bar/&lt;/span&gt;
&lt;span class="c1"&gt;# (Uses the INDEX_FILE setting, so if that is, say, default.html,&lt;/span&gt;
&lt;span class="c1"&gt;# it will instead /foo/default.html =&amp;gt; /foo)&lt;/span&gt;
&lt;span class="n"&gt;STRIP_INDEXES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb4874ad" class="outline-2"&gt;
&lt;h2 id="orgb4874ad"&gt;Search Form&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgb4874ad"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# A search form to search this site, for the sidebar. You can use a Google&lt;/span&gt;
&lt;span class="c1"&gt;# custom search (https://www.google.com/cse/)&lt;/span&gt;
&lt;span class="c1"&gt;# Or a DuckDuckGo search: https://duckduckgo.com/search_box.html&lt;/span&gt;
&lt;span class="c1"&gt;# Default is no search form.&lt;/span&gt;
&lt;span class="c1"&gt;# (translatable)&lt;/span&gt;
&lt;span class="c1"&gt;# SEARCH_FORM = ""&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# This search form works for any site and looks good in the "site" theme where&lt;/span&gt;
&lt;span class="c1"&gt;# it appears on the navigation bar:&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="n"&gt;SEARCH_FORM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"""&lt;/span&gt;
&lt;span class="s2"&gt; &amp;lt;!-- DuckDuckGo custom search --&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt; &amp;lt;form method="get" id="search" action="https://duckduckgo.com/" role="search"&lt;/span&gt;
&lt;span class="s2"&gt;  class="d-flex"&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt; &amp;lt;input type="hidden" name="sites" value="&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt; &amp;lt;input type="hidden" name="k8" value="#444444"&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt; &amp;lt;input type="hidden" name="k9" value="#D51920"&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt; &amp;lt;input type="hidden" name="kt" value="h"&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt; &amp;lt;input type="text" name="q" maxlength="255"&lt;/span&gt;
&lt;span class="s2"&gt;  placeholder="Search&amp;amp;hellip;" class="form-control me-2" style="margin-top: 4px;" aria-lab&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt; &amp;lt;input type="submit" value="DuckDuckGo Search" style="visibility: hidden;"&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt; &amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt; &amp;lt;!-- End of custom search --&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt; """&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;SITE_URL&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org729db7f" class="outline-2"&gt;
&lt;h2 id="org729db7f"&gt;The Tangle&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org729db7f"&gt;
&lt;p&gt;
This should eventually get broken up enough to be hidden, but not yet.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="c1"&gt;# !! This is the configuration of Nikola. !! #&lt;/span&gt;
&lt;span class="c1"&gt;# !!  You should edit it to your liking.  !! #&lt;/span&gt;


&lt;span class="c1"&gt;# ! Some settings can be different in different languages.&lt;/span&gt;
&lt;span class="c1"&gt;# ! A comment stating (translatable) is used to denote those.&lt;/span&gt;
&lt;span class="c1"&gt;# ! There are two ways to specify a translatable setting:&lt;/span&gt;
&lt;span class="c1"&gt;# ! (a) BLOG_TITLE = "My Blog"&lt;/span&gt;
&lt;span class="c1"&gt;# ! (b) BLOG_TITLE = {"en": "My Blog", "es": "Mi Blog"}&lt;/span&gt;
&lt;span class="c1"&gt;# ! Option (a) is used when you don't want that setting translated.&lt;/span&gt;
&lt;span class="c1"&gt;# ! Option (b) is used for settings that are different in different languages.&lt;/span&gt;


&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;


&lt;span class="c1"&gt;# Nikola is multilingual!&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Currently supported languages are:&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# en        English&lt;/span&gt;
&lt;span class="c1"&gt;# af        Afrikaans&lt;/span&gt;
&lt;span class="c1"&gt;# ar        Arabic&lt;/span&gt;
&lt;span class="c1"&gt;# az        Azerbaijani&lt;/span&gt;
&lt;span class="c1"&gt;# bg        Bulgarian&lt;/span&gt;
&lt;span class="c1"&gt;# bs        Bosnian&lt;/span&gt;
&lt;span class="c1"&gt;# ca        Catalan&lt;/span&gt;
&lt;span class="c1"&gt;# cs        Czech [ALTERNATIVELY cz]&lt;/span&gt;
&lt;span class="c1"&gt;# da        Danish&lt;/span&gt;
&lt;span class="c1"&gt;# de        German&lt;/span&gt;
&lt;span class="c1"&gt;# el        Greek [NOT gr]&lt;/span&gt;
&lt;span class="c1"&gt;# eo        Esperanto&lt;/span&gt;
&lt;span class="c1"&gt;# es        Spanish&lt;/span&gt;
&lt;span class="c1"&gt;# et        Estonian&lt;/span&gt;
&lt;span class="c1"&gt;# eu        Basque&lt;/span&gt;
&lt;span class="c1"&gt;# fa        Persian&lt;/span&gt;
&lt;span class="c1"&gt;# fi        Finnish&lt;/span&gt;
&lt;span class="c1"&gt;# fr        French&lt;/span&gt;
&lt;span class="c1"&gt;# fur       Friulian&lt;/span&gt;
&lt;span class="c1"&gt;# gl        Galician&lt;/span&gt;
&lt;span class="c1"&gt;# he        Hebrew&lt;/span&gt;
&lt;span class="c1"&gt;# hi        Hindi&lt;/span&gt;
&lt;span class="c1"&gt;# hr        Croatian&lt;/span&gt;
&lt;span class="c1"&gt;# hu        Hungarian&lt;/span&gt;
&lt;span class="c1"&gt;# ia        Interlingua&lt;/span&gt;
&lt;span class="c1"&gt;# id        Indonesian&lt;/span&gt;
&lt;span class="c1"&gt;# it        Italian&lt;/span&gt;
&lt;span class="c1"&gt;# ja        Japanese [NOT jp]&lt;/span&gt;
&lt;span class="c1"&gt;# ko        Korean&lt;/span&gt;
&lt;span class="c1"&gt;# lt        Lithuanian&lt;/span&gt;
&lt;span class="c1"&gt;# ml        Malayalam&lt;/span&gt;
&lt;span class="c1"&gt;# mr        Marathi&lt;/span&gt;
&lt;span class="c1"&gt;# nb        Norwegian (Bokmål)&lt;/span&gt;
&lt;span class="c1"&gt;# nl        Dutch&lt;/span&gt;
&lt;span class="c1"&gt;# pa        Punjabi&lt;/span&gt;
&lt;span class="c1"&gt;# pl        Polish&lt;/span&gt;
&lt;span class="c1"&gt;# pt        Portuguese&lt;/span&gt;
&lt;span class="c1"&gt;# pt_br     Portuguese (Brazil)&lt;/span&gt;
&lt;span class="c1"&gt;# ru        Russian&lt;/span&gt;
&lt;span class="c1"&gt;# sk        Slovak&lt;/span&gt;
&lt;span class="c1"&gt;# sl        Slovene&lt;/span&gt;
&lt;span class="c1"&gt;# sq        Albanian&lt;/span&gt;
&lt;span class="c1"&gt;# sr        Serbian (Cyrillic)&lt;/span&gt;
&lt;span class="c1"&gt;# sr_latin  Serbian (Latin)&lt;/span&gt;
&lt;span class="c1"&gt;# sv        Swedish&lt;/span&gt;
&lt;span class="c1"&gt;# te        Telugu&lt;/span&gt;
&lt;span class="c1"&gt;# th        Thai&lt;/span&gt;
&lt;span class="c1"&gt;# tr        Turkish [NOT tr_TR]&lt;/span&gt;
&lt;span class="c1"&gt;# uk        Ukrainian&lt;/span&gt;
&lt;span class="c1"&gt;# ur        Urdu&lt;/span&gt;
&lt;span class="c1"&gt;# vi        Vietnamese&lt;/span&gt;
&lt;span class="c1"&gt;# zh_cn     Chinese (Simplified)&lt;/span&gt;
&lt;span class="c1"&gt;# zh_tw     Chinese (Traditional)&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# If you want to use Nikola with a non-supported language you have to provide&lt;/span&gt;
&lt;span class="c1"&gt;# a module containing the necessary translations&lt;/span&gt;
&lt;span class="c1"&gt;# (cf. the modules at nikola/data/themes/base/messages/).&lt;/span&gt;
&lt;span class="c1"&gt;# If a specific post is not translated to a language, then the version&lt;/span&gt;
&lt;span class="c1"&gt;# in the default language will be shown instead.&lt;/span&gt;

&lt;span class="c1"&gt;# What is the default language?&lt;/span&gt;
&lt;span class="n"&gt;DEFAULT_LANG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"en"&lt;/span&gt;

&lt;span class="c1"&gt;# What other languages do you have?&lt;/span&gt;
&lt;span class="c1"&gt;# The format is {"translationcode" : "path/to/translation" }&lt;/span&gt;
&lt;span class="c1"&gt;# the path will be used as a prefix for the generated pages location&lt;/span&gt;
&lt;span class="n"&gt;TRANSLATIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;DEFAULT_LANG&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;# Example for another language:&lt;/span&gt;
    &lt;span class="c1"&gt;# "es": "./es",&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# What will translated input files be named like?&lt;/span&gt;

&lt;span class="c1"&gt;# If you have a page something.rst, then something.pl.rst will be considered&lt;/span&gt;
&lt;span class="c1"&gt;# its Polish translation.&lt;/span&gt;
&lt;span class="c1"&gt;#     (in the above example: path == "something", ext == "rst", lang == "pl")&lt;/span&gt;
&lt;span class="c1"&gt;# this pattern is also used for metadata:&lt;/span&gt;
&lt;span class="c1"&gt;#     something.meta -&amp;gt; something.pl.meta&lt;/span&gt;

&lt;span class="n"&gt;TRANSLATIONS_PATTERN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{path}&lt;/span&gt;&lt;span class="s1"&gt;.&lt;/span&gt;&lt;span class="si"&gt;{lang}&lt;/span&gt;&lt;span class="s1"&gt;.&lt;/span&gt;&lt;span class="si"&gt;{ext}&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;# Links for the sidebar / navigation bar.  (translatable)&lt;/span&gt;
&lt;span class="c1"&gt;# This is a dict.  The keys are languages, and values are tuples.&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# For regular links:&lt;/span&gt;
&lt;span class="c1"&gt;#     ('https://getnikola.com/', 'Nikola Homepage')&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# For submenus:&lt;/span&gt;
&lt;span class="c1"&gt;#     (&lt;/span&gt;
&lt;span class="c1"&gt;#         (&lt;/span&gt;
&lt;span class="c1"&gt;#             ('https://apple.com/', 'Apple'),&lt;/span&gt;
&lt;span class="c1"&gt;#             ('https://orange.com/', 'Orange'),&lt;/span&gt;
&lt;span class="c1"&gt;#         ),&lt;/span&gt;
&lt;span class="c1"&gt;#         'Fruits'&lt;/span&gt;
&lt;span class="c1"&gt;#     )&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# WARNING: Support for submenus is theme-dependent.&lt;/span&gt;
&lt;span class="c1"&gt;#          Only one level of submenus is supported.&lt;/span&gt;
&lt;span class="c1"&gt;# WARNING: Some themes, including the default Bootstrap 4 theme,&lt;/span&gt;
&lt;span class="c1"&gt;#          may present issues if the menu is too large.&lt;/span&gt;
&lt;span class="c1"&gt;#          (in Bootstrap, the navbar can grow too large and cover contents.)&lt;/span&gt;
&lt;span class="c1"&gt;# WARNING: If you link to directories, make sure to follow&lt;/span&gt;
&lt;span class="c1"&gt;#          ``STRIP_INDEXES``.  If it’s set to ``True``, end your links&lt;/span&gt;
&lt;span class="c1"&gt;#          with a ``/``, otherwise end them with ``/index.html`` — or&lt;/span&gt;
&lt;span class="c1"&gt;#          else they won’t be highlighted when active.&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;navigation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;links&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;# Alternative navigation links. Works the same way NAVIGATION_LINKS does,&lt;/span&gt;
&lt;span class="c1"&gt;# although themes may not always support them. (translatable)&lt;/span&gt;
&lt;span class="c1"&gt;# (Bootstrap 4: right-side of navbar, Bootblog 4: right side of title)&lt;/span&gt;
&lt;span class="n"&gt;NAVIGATION_ALT_LINKS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;DEFAULT_LANG&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;theme&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;# A theme color. In default themes, it might be displayed by some browsers as&lt;/span&gt;
&lt;span class="c1"&gt;# the browser UI color (eg. Chrome on Android). Other themes might also use it&lt;/span&gt;
&lt;span class="c1"&gt;# as an accent color (the default ones don’t). Must be a HEX value.&lt;/span&gt;
&lt;span class="n"&gt;THEME_COLOR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'#5670d4'&lt;/span&gt;

&lt;span class="c1"&gt;# Theme configuration. Fully theme-dependent. (translatable)&lt;/span&gt;
&lt;span class="c1"&gt;# Samples for bootblog4 (enabled) and bootstrap4 (commented) follow.&lt;/span&gt;
&lt;span class="c1"&gt;# bootblog4 supports: featured_large featured_small featured_on_mobile&lt;/span&gt;
&lt;span class="c1"&gt;#                     featured_large_image_on_mobile featured_strip_html sidebar&lt;/span&gt;
&lt;span class="c1"&gt;# bootstrap4 supports: navbar_light (defaults to False)&lt;/span&gt;
&lt;span class="c1"&gt;#                      navbar_custom_bg (defaults to '')&lt;/span&gt;

&lt;span class="c1"&gt;# Config for bootblog4:&lt;/span&gt;
&lt;span class="n"&gt;THEME_CONFIG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;DEFAULT_LANG&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
	&lt;span class="c1"&gt;# Show the latest featured post in a large box, with the previewimage as its background.&lt;/span&gt;
	&lt;span class="s1"&gt;'featured_large'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
	&lt;span class="c1"&gt;# Show the first (remaining) two featured posts in small boxes.&lt;/span&gt;
	&lt;span class="s1"&gt;'featured_small'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
	&lt;span class="c1"&gt;# Show featured posts on mobile.&lt;/span&gt;
	&lt;span class="s1"&gt;'featured_on_mobile'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
	&lt;span class="c1"&gt;# Show image in `featured_large` on mobile.&lt;/span&gt;
	&lt;span class="c1"&gt;# `featured_small` displays them only on desktop.&lt;/span&gt;
	&lt;span class="s1"&gt;'featured_large_image_on_mobile'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
	&lt;span class="c1"&gt;# Strip HTML from featured post text.&lt;/span&gt;
	&lt;span class="s1"&gt;'featured_strip_html'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
	&lt;span class="c1"&gt;# Contents of the sidebar, If empty, the sidebar is not displayed.&lt;/span&gt;
	&lt;span class="s1"&gt;'sidebar'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
	&lt;span class="s2"&gt;"navbar_light"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;# Config for bootstrap4:&lt;/span&gt;
&lt;span class="c1"&gt;# THEME_CONFIG = {&lt;/span&gt;
&lt;span class="c1"&gt;#     DEFAULT_LANG: {&lt;/span&gt;
&lt;span class="c1"&gt;#         # Use a light navbar with dark text. Defaults to False.&lt;/span&gt;
&lt;span class="c1"&gt;#         'navbar_light': False,&lt;/span&gt;
&lt;span class="c1"&gt;#         # Use a custom navbar color. If unset, 'navbar_light' sets text +&lt;/span&gt;
&lt;span class="c1"&gt;#         # background color. If set, navbar_light controls only background&lt;/span&gt;
&lt;span class="c1"&gt;#         # color. Supported values: bg-dark, bg-light, bg-primary, bg-secondary,&lt;/span&gt;
&lt;span class="c1"&gt;#         # bg-success, bg-danger, bg-warning, bg-info, bg-white, bg-transparent.&lt;/span&gt;
&lt;span class="c1"&gt;#         'navbar_custom_bg': '',&lt;/span&gt;
&lt;span class="c1"&gt;#     }&lt;/span&gt;
&lt;span class="c1"&gt;# }&lt;/span&gt;

&lt;span class="c1"&gt;# POSTS and PAGES contains (wildcard, destination, template) tuples.&lt;/span&gt;
&lt;span class="c1"&gt;# (translatable)&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# The wildcard is used to generate a list of source files&lt;/span&gt;
&lt;span class="c1"&gt;# (whatever/thing.rst, for example).&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# That fragment could have an associated metadata file (whatever/thing.meta),&lt;/span&gt;
&lt;span class="c1"&gt;# and optionally translated files (example for Spanish, with code "es"):&lt;/span&gt;
&lt;span class="c1"&gt;#     whatever/thing.es.rst and whatever/thing.es.meta&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;#     This assumes you use the default TRANSLATIONS_PATTERN.&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# From those files, a set of HTML fragment files will be generated:&lt;/span&gt;
&lt;span class="c1"&gt;# cache/whatever/thing.html (and maybe cache/whatever/thing.html.es)&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# These files are combined with the template to produce rendered&lt;/span&gt;
&lt;span class="c1"&gt;# pages, which will be placed at&lt;/span&gt;
&lt;span class="c1"&gt;# output/TRANSLATIONS[lang]/destination/pagename.html&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# where "pagename" is the "slug" specified in the metadata file.&lt;/span&gt;
&lt;span class="c1"&gt;# The page might also be placed in /destination/pagename/index.html&lt;/span&gt;
&lt;span class="c1"&gt;# if PRETTY_URLS are enabled.&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# The difference between POSTS and PAGES is that POSTS are added&lt;/span&gt;
&lt;span class="c1"&gt;# to feeds, indexes, tag lists and archives and are considered part&lt;/span&gt;
&lt;span class="c1"&gt;# of a blog, while PAGES are just independent HTML pages.&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Finally, note that destination can be translated, i.e. you can&lt;/span&gt;
&lt;span class="c1"&gt;# specify a different translation folder per language. Example:&lt;/span&gt;
&lt;span class="c1"&gt;#     PAGES = (&lt;/span&gt;
&lt;span class="c1"&gt;#         ("pages/*.rst", {"en": "pages", "de": "seiten"}, "page.tmpl"),&lt;/span&gt;
&lt;span class="c1"&gt;#         ("pages/*.md", {"en": "pages", "de": "seiten"}, "page.tmpl"),&lt;/span&gt;
&lt;span class="c1"&gt;#     )&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;formats&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;pages&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;


&lt;span class="c1"&gt;# Below this point, everything is optional&lt;/span&gt;

&lt;span class="c1"&gt;# Post's dates are considered in UTC by default, if you want to use&lt;/span&gt;
&lt;span class="c1"&gt;# another time zone, please set TIMEZONE to match. Check the available&lt;/span&gt;
&lt;span class="c1"&gt;# list from Wikipedia:&lt;/span&gt;
&lt;span class="c1"&gt;# https://en.wikipedia.org/wiki/List_of_tz_database_time_zones&lt;/span&gt;
&lt;span class="c1"&gt;# (e.g. 'Europe/Zurich')&lt;/span&gt;
&lt;span class="c1"&gt;# Also, if you want to use a different time zone in some of your posts,&lt;/span&gt;
&lt;span class="c1"&gt;# you can use the ISO 8601/RFC 3339 format (ex. 2012-03-30T23:00:00+02:00)&lt;/span&gt;
&lt;span class="n"&gt;TIMEZONE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"America/Los_Angeles"&lt;/span&gt;

&lt;span class="c1"&gt;# If you want to use ISO 8601 (also valid RFC 3339) throughout Nikola&lt;/span&gt;
&lt;span class="c1"&gt;# (especially in new_post), set this to True.&lt;/span&gt;
&lt;span class="c1"&gt;# Note that this does not affect DATE_FORMAT.&lt;/span&gt;
&lt;span class="c1"&gt;# FORCE_ISO8601 = False&lt;/span&gt;

&lt;span class="c1"&gt;# Date format used to display post dates. (translatable)&lt;/span&gt;
&lt;span class="c1"&gt;# Used by babel.dates, CLDR style: http://cldr.unicode.org/translation/date-time-1/date-time&lt;/span&gt;
&lt;span class="c1"&gt;# You can also use 'full', 'long', 'medium', or 'short'&lt;/span&gt;
&lt;span class="c1"&gt;# DATE_FORMAT = 'yyyy-MM-dd HH:mm'&lt;/span&gt;

&lt;span class="c1"&gt;# Date format used to display post dates, if local dates are used. (translatable)&lt;/span&gt;
&lt;span class="c1"&gt;# Used by Luxon: https://moment.github.io/luxon/docs/manual/formatting&lt;/span&gt;
&lt;span class="c1"&gt;# Example for presets: {'preset': True, 'format': 'DATE_FULL'}&lt;/span&gt;
&lt;span class="c1"&gt;# LUXON_DATE_FORMAT = {&lt;/span&gt;
&lt;span class="c1"&gt;#     DEFAULT_LANG: {'preset': False, 'format': 'yyyy-MM-dd HH:mm'},&lt;/span&gt;
&lt;span class="c1"&gt;# }&lt;/span&gt;

&lt;span class="c1"&gt;# Date fanciness.&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# 0 = using DATE_FORMAT and TIMEZONE (without JS)&lt;/span&gt;
&lt;span class="c1"&gt;# 1 = using LUXON_DATE_FORMAT and local user time (JS, using Luxon)&lt;/span&gt;
&lt;span class="c1"&gt;# 2 = using a string like “2 days ago” (JS, using Luxon)&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Your theme must support it, Bootstrap already does.&lt;/span&gt;
&lt;span class="c1"&gt;# DATE_FANCINESS = 0&lt;/span&gt;

&lt;span class="c1"&gt;# Customize the locale/region used for a language.&lt;/span&gt;
&lt;span class="c1"&gt;# For example, to use British instead of US English: LOCALES = {'en': 'en_GB'}&lt;/span&gt;
&lt;span class="c1"&gt;# LOCALES = {}&lt;/span&gt;

&lt;span class="c1"&gt;# One or more folders containing files to be copied as-is into the output.&lt;/span&gt;
&lt;span class="c1"&gt;# The format is a dictionary of {source: relative destination}.&lt;/span&gt;
&lt;span class="c1"&gt;# Default is:&lt;/span&gt;
&lt;span class="c1"&gt;# FILES_FOLDERS = {'files': ''}&lt;/span&gt;
&lt;span class="c1"&gt;# Which means copy 'files' into 'output'&lt;/span&gt;

&lt;span class="c1"&gt;# One or more folders containing code listings to be processed and published on&lt;/span&gt;
&lt;span class="c1"&gt;# the site. The format is a dictionary of {source: relative destination}.&lt;/span&gt;
&lt;span class="c1"&gt;# Default is:&lt;/span&gt;
&lt;span class="c1"&gt;# LISTINGS_FOLDERS = {'listings': 'listings'}&lt;/span&gt;
&lt;span class="c1"&gt;# Which means process listings from 'listings' into 'output/listings'&lt;/span&gt;

&lt;span class="c1"&gt;# A mapping of languages to file-extensions that represent that language.&lt;/span&gt;
&lt;span class="c1"&gt;# Feel free to add or delete extensions to any list, but don't add any new&lt;/span&gt;
&lt;span class="c1"&gt;# compilers unless you write the interface for it yourself.&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# The default compiler for `new_post` is the first entry in the POSTS tuple.&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# 'rest' is reStructuredText&lt;/span&gt;
&lt;span class="c1"&gt;# 'markdown' is Markdown&lt;/span&gt;
&lt;span class="c1"&gt;# 'html' assumes the file is HTML and just copies it&lt;/span&gt;
&lt;span class="n"&gt;COMPILERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"rest"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'.rst'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'.txt'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="c1"&gt;#"markdown": ['.md', '.mdown', '.markdown'],&lt;/span&gt;
    &lt;span class="c1"&gt;#"textile": ['.textile'],&lt;/span&gt;
    &lt;span class="c1"&gt;#"txt2tags": ['.t2t'],&lt;/span&gt;
    &lt;span class="c1"&gt;#"bbcode": ['.bb'],&lt;/span&gt;
    &lt;span class="c1"&gt;#"wiki": ['.wiki'],&lt;/span&gt;
    &lt;span class="c1"&gt;#"ipynb": ['.ipynb'],&lt;/span&gt;
    &lt;span class="c1"&gt;#"html": ['.html', '.htm'],&lt;/span&gt;
    &lt;span class="c1"&gt;# PHP files are rendered the usual way (i.e. with the full templates).&lt;/span&gt;
    &lt;span class="c1"&gt;# The resulting files have .php extensions, making it possible to run&lt;/span&gt;
    &lt;span class="c1"&gt;# them without reconfiguring your server to recognize them.&lt;/span&gt;
    &lt;span class="c1"&gt;#"php": ['.php'],&lt;/span&gt;
    &lt;span class="c1"&gt;# Pandoc detects the input from the source filename&lt;/span&gt;
    &lt;span class="c1"&gt;# but is disabled by default as it would conflict&lt;/span&gt;
    &lt;span class="c1"&gt;# with many of the others.&lt;/span&gt;
    &lt;span class="c1"&gt;# "pandoc": ['.rst', '.md', '.txt'],&lt;/span&gt;
    &lt;span class="s2"&gt;"orgmode"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;".org"&lt;/span&gt;&lt;span class="p"&gt;,),&lt;/span&gt;    
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# Enable reST directives that insert the contents of external files such&lt;/span&gt;
&lt;span class="c1"&gt;# as "include" and "raw." This maps directly to the docutils file_insertion_enabled&lt;/span&gt;
&lt;span class="c1"&gt;# config. See: https://docutils.sourceforge.io/docs/user/config.html#file-insertion-enabled&lt;/span&gt;
&lt;span class="c1"&gt;# REST_FILE_INSERTION_ENABLED = True&lt;/span&gt;

&lt;span class="c1"&gt;# Create by default posts in one file format?&lt;/span&gt;
&lt;span class="c1"&gt;# Set to False for two-file posts, with separate metadata.&lt;/span&gt;
&lt;span class="c1"&gt;# ONE_FILE_POSTS = True&lt;/span&gt;

&lt;span class="c1"&gt;# Preferred metadata format for new posts&lt;/span&gt;
&lt;span class="c1"&gt;# "Nikola": reST comments, wrapped in a HTML comment if needed (default)&lt;/span&gt;
&lt;span class="c1"&gt;# "YAML": YAML wrapped in "---"&lt;/span&gt;
&lt;span class="c1"&gt;# "TOML": TOML wrapped in "+++"&lt;/span&gt;
&lt;span class="c1"&gt;# "Pelican": Native markdown metadata or reST docinfo fields. Nikola style for other formats.&lt;/span&gt;
&lt;span class="c1"&gt;# METADATA_FORMAT = "Nikola"&lt;/span&gt;

&lt;span class="c1"&gt;# Use date-based path when creating posts?&lt;/span&gt;
&lt;span class="c1"&gt;# Can be enabled on a per-post basis with `nikola new_post -d`.&lt;/span&gt;
&lt;span class="c1"&gt;# The setting is ignored when creating pages.&lt;/span&gt;
&lt;span class="c1"&gt;# NEW_POST_DATE_PATH = False&lt;/span&gt;

&lt;span class="c1"&gt;# What format to use when creating posts with date paths?&lt;/span&gt;
&lt;span class="c1"&gt;# Default is '%Y/%m/%d', other possibilities include '%Y' or '%Y/%m'.&lt;/span&gt;
&lt;span class="c1"&gt;# NEW_POST_DATE_PATH_FORMAT = '%Y/%m/%d'&lt;/span&gt;

&lt;span class="c1"&gt;# If this is set to True, the DEFAULT_LANG version will be displayed for&lt;/span&gt;
&lt;span class="c1"&gt;# untranslated posts.&lt;/span&gt;
&lt;span class="c1"&gt;# If this is set to False, then posts that are not translated to a language&lt;/span&gt;
&lt;span class="c1"&gt;# LANG will not be visible at all in the pages in that language.&lt;/span&gt;
&lt;span class="c1"&gt;# SHOW_UNTRANSLATED_POSTS = True&lt;/span&gt;

&lt;span class="c1"&gt;# Nikola supports logo display.  If you have one, you can put the URL here.&lt;/span&gt;
&lt;span class="c1"&gt;# Final output is &amp;lt;img src="LOGO_URL" id="logo" alt="BLOG_TITLE"&amp;gt;.&lt;/span&gt;
&lt;span class="c1"&gt;# The URL may be relative to the site root.&lt;/span&gt;
&lt;span class="c1"&gt;# LOGO_URL = ''&lt;/span&gt;

&lt;span class="c1"&gt;# When linking posts to social media, Nikola provides Open Graph metadata&lt;/span&gt;
&lt;span class="c1"&gt;# which is used to show a nice preview. This includes an image preview&lt;/span&gt;
&lt;span class="c1"&gt;# taken from the post's previewimage metadata field.&lt;/span&gt;
&lt;span class="c1"&gt;# This option lets you use an image to be used if the post doesn't have it.&lt;/span&gt;
&lt;span class="c1"&gt;# The default is None, valid values are URLs or output paths like&lt;/span&gt;
&lt;span class="c1"&gt;# "/images/foo.jpg"&lt;/span&gt;
&lt;span class="c1"&gt;# DEFAULT_PREVIEW_IMAGE = None&lt;/span&gt;

&lt;span class="c1"&gt;# If you want to hide the title of your website (for example, if your logo&lt;/span&gt;
&lt;span class="c1"&gt;# already contains the text), set this to False.&lt;/span&gt;
&lt;span class="c1"&gt;# Note: if your logo is a SVG image, and you set SHOW_BLOG_TITLE = False,&lt;/span&gt;
&lt;span class="c1"&gt;# you should explicitly set a height for #logo in CSS.&lt;/span&gt;
&lt;span class="c1"&gt;# SHOW_BLOG_TITLE = True&lt;/span&gt;

&lt;span class="c1"&gt;# Paths for different autogenerated bits. These are combined with the&lt;/span&gt;
&lt;span class="c1"&gt;# translation paths.&lt;/span&gt;

&lt;span class="c1"&gt;# Final locations are:&lt;/span&gt;
&lt;span class="c1"&gt;# output / TRANSLATION[lang] / TAG_PATH / index.html (list of tags)&lt;/span&gt;
&lt;span class="c1"&gt;# output / TRANSLATION[lang] / TAG_PATH / tag.html (list of posts for a tag)&lt;/span&gt;
&lt;span class="c1"&gt;# output / TRANSLATION[lang] / TAG_PATH / tag RSS_EXTENSION (RSS feed for a tag)&lt;/span&gt;
&lt;span class="c1"&gt;# (translatable)&lt;/span&gt;
&lt;span class="c1"&gt;# TAG_PATH = "categories"&lt;/span&gt;

&lt;span class="c1"&gt;# By default, the list of tags is stored in&lt;/span&gt;
&lt;span class="c1"&gt;#     output / TRANSLATION[lang] / TAG_PATH / index.html&lt;/span&gt;
&lt;span class="c1"&gt;# (see explanation for TAG_PATH). This location can be changed to&lt;/span&gt;
&lt;span class="c1"&gt;#     output / TRANSLATION[lang] / TAGS_INDEX_PATH&lt;/span&gt;
&lt;span class="c1"&gt;# with an arbitrary relative path TAGS_INDEX_PATH.&lt;/span&gt;
&lt;span class="c1"&gt;# (translatable)&lt;/span&gt;
&lt;span class="c1"&gt;# TAGS_INDEX_PATH = "tags.html"&lt;/span&gt;

&lt;span class="c1"&gt;# If TAG_PAGES_ARE_INDEXES is set to True, each tag's page will contain&lt;/span&gt;
&lt;span class="c1"&gt;# the posts themselves. If set to False, it will be just a list of links.&lt;/span&gt;
&lt;span class="c1"&gt;# TAG_PAGES_ARE_INDEXES = False&lt;/span&gt;

&lt;span class="c1"&gt;# Set descriptions for tag pages to make them more interesting. The&lt;/span&gt;
&lt;span class="c1"&gt;# default is no description. The value is used in the meta description&lt;/span&gt;
&lt;span class="c1"&gt;# and displayed underneath the tag list or index page’s title.&lt;/span&gt;
&lt;span class="c1"&gt;# TAG_DESCRIPTIONS = {&lt;/span&gt;
&lt;span class="c1"&gt;#    DEFAULT_LANG: {&lt;/span&gt;
&lt;span class="c1"&gt;#        "blogging": "Meta-blog posts about blogging.",&lt;/span&gt;
&lt;span class="c1"&gt;#        "open source": "My contributions to my many, varied, ever-changing, and eternal libre software projects."&lt;/span&gt;
&lt;span class="c1"&gt;#    },&lt;/span&gt;
&lt;span class="c1"&gt;# }&lt;/span&gt;

&lt;span class="c1"&gt;# Set special titles for tag pages. The default is "Posts about TAG".&lt;/span&gt;
&lt;span class="c1"&gt;# TAG_TITLES = {&lt;/span&gt;
&lt;span class="c1"&gt;#    DEFAULT_LANG: {&lt;/span&gt;
&lt;span class="c1"&gt;#        "blogging": "Meta-posts about blogging",&lt;/span&gt;
&lt;span class="c1"&gt;#        "open source": "Posts about open source software"&lt;/span&gt;
&lt;span class="c1"&gt;#    },&lt;/span&gt;
&lt;span class="c1"&gt;# }&lt;/span&gt;

&lt;span class="c1"&gt;# If you do not want to display a tag publicly, you can mark it as hidden.&lt;/span&gt;
&lt;span class="c1"&gt;# The tag will not be displayed on the tag list page and posts.&lt;/span&gt;
&lt;span class="c1"&gt;# Tag pages will still be generated.&lt;/span&gt;
&lt;span class="n"&gt;HIDDEN_TAGS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'mathjax'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Only include tags on the tag list/overview page if there are at least&lt;/span&gt;
&lt;span class="c1"&gt;# TAGLIST_MINIMUM_POSTS number of posts or more with every tag. Every tag&lt;/span&gt;
&lt;span class="c1"&gt;# page is still generated, linked from posts, and included in the sitemap.&lt;/span&gt;
&lt;span class="c1"&gt;# However, more obscure tags can be hidden from the tag index page.&lt;/span&gt;
&lt;span class="c1"&gt;# TAGLIST_MINIMUM_POSTS = 1&lt;/span&gt;

&lt;span class="c1"&gt;# A list of dictionaries specifying tags which translate to each other.&lt;/span&gt;
&lt;span class="c1"&gt;# Format: a list of dicts {language: translation, language2: translation2, …}&lt;/span&gt;
&lt;span class="c1"&gt;# For example:&lt;/span&gt;
&lt;span class="c1"&gt;#   [&lt;/span&gt;
&lt;span class="c1"&gt;#     {'en': 'private', 'de': 'Privat'},&lt;/span&gt;
&lt;span class="c1"&gt;#     {'en': 'work', 'fr': 'travail', 'de': 'Arbeit'},&lt;/span&gt;
&lt;span class="c1"&gt;#   ]&lt;/span&gt;
&lt;span class="c1"&gt;# TAG_TRANSLATIONS = []&lt;/span&gt;

&lt;span class="c1"&gt;# If set to True, a tag in a language will be treated as a translation&lt;/span&gt;
&lt;span class="c1"&gt;# of the literally same tag in all other languages. Enable this if you&lt;/span&gt;
&lt;span class="c1"&gt;# do not translate tags, for example.&lt;/span&gt;
&lt;span class="c1"&gt;# TAG_TRANSLATIONS_ADD_DEFAULTS = True&lt;/span&gt;

&lt;span class="c1"&gt;# Final locations are:&lt;/span&gt;
&lt;span class="c1"&gt;# output / TRANSLATION[lang] / CATEGORY_PATH / index.html (list of categories)&lt;/span&gt;
&lt;span class="c1"&gt;# output / TRANSLATION[lang] / CATEGORY_PATH / CATEGORY_PREFIX category.html (list of posts for a category)&lt;/span&gt;
&lt;span class="c1"&gt;# output / TRANSLATION[lang] / CATEGORY_PATH / CATEGORY_PREFIX category RSS_EXTENSION (RSS feed for a category)&lt;/span&gt;
&lt;span class="c1"&gt;# (translatable)&lt;/span&gt;
&lt;span class="c1"&gt;# CATEGORY_PATH = "categories"&lt;/span&gt;
&lt;span class="c1"&gt;# CATEGORY_PREFIX = "cat_"&lt;/span&gt;

&lt;span class="c1"&gt;# By default, the list of categories is stored in&lt;/span&gt;
&lt;span class="c1"&gt;#     output / TRANSLATION[lang] / CATEGORY_PATH / index.html&lt;/span&gt;
&lt;span class="c1"&gt;# (see explanation for CATEGORY_PATH). This location can be changed to&lt;/span&gt;
&lt;span class="c1"&gt;#     output / TRANSLATION[lang] / CATEGORIES_INDEX_PATH&lt;/span&gt;
&lt;span class="c1"&gt;# with an arbitrary relative path CATEGORIES_INDEX_PATH.&lt;/span&gt;
&lt;span class="c1"&gt;# (translatable)&lt;/span&gt;
&lt;span class="c1"&gt;# CATEGORIES_INDEX_PATH = "categories.html"&lt;/span&gt;

&lt;span class="c1"&gt;# If CATEGORY_ALLOW_HIERARCHIES is set to True, categories can be organized in&lt;/span&gt;
&lt;span class="c1"&gt;# hierarchies. For a post, the whole path in the hierarchy must be specified,&lt;/span&gt;
&lt;span class="c1"&gt;# using a forward slash ('/') to separate paths. Use a backslash ('\') to escape&lt;/span&gt;
&lt;span class="c1"&gt;# a forward slash or a backslash (i.e. '\//\\' is a path specifying the&lt;/span&gt;
&lt;span class="c1"&gt;# subcategory called '\' of the top-level category called '/').&lt;/span&gt;
&lt;span class="n"&gt;CATEGORY_ALLOW_HIERARCHIES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
&lt;span class="c1"&gt;# If CATEGORY_OUTPUT_FLAT_HIERARCHY is set to True, the output written to output&lt;/span&gt;
&lt;span class="c1"&gt;# contains only the name of the leaf category and not the whole path.&lt;/span&gt;
&lt;span class="n"&gt;CATEGORY_OUTPUT_FLAT_HIERARCHY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;

&lt;span class="c1"&gt;# If CATEGORY_PAGES_ARE_INDEXES is set to True, each category's page will contain&lt;/span&gt;
&lt;span class="c1"&gt;# the posts themselves. If set to False, it will be just a list of links.&lt;/span&gt;
&lt;span class="c1"&gt;# CATEGORY_PAGES_ARE_INDEXES = False&lt;/span&gt;

&lt;span class="c1"&gt;# Set descriptions for category pages to make them more interesting. The&lt;/span&gt;
&lt;span class="c1"&gt;# default is no description. The value is used in the meta description&lt;/span&gt;
&lt;span class="c1"&gt;# and displayed underneath the category list or index page’s title.&lt;/span&gt;
&lt;span class="c1"&gt;# CATEGORY_DESCRIPTIONS = {&lt;/span&gt;
&lt;span class="c1"&gt;#    DEFAULT_LANG: {&lt;/span&gt;
&lt;span class="c1"&gt;#        "blogging": "Meta-blog posts about blogging.",&lt;/span&gt;
&lt;span class="c1"&gt;#        "open source": "My contributions to my many, varied, ever-changing, and eternal libre software projects."&lt;/span&gt;
&lt;span class="c1"&gt;#    },&lt;/span&gt;
&lt;span class="c1"&gt;# }&lt;/span&gt;

&lt;span class="c1"&gt;# Set special titles for category pages. The default is "Posts about CATEGORY".&lt;/span&gt;
&lt;span class="c1"&gt;# CATEGORY_TITLES = {&lt;/span&gt;
&lt;span class="c1"&gt;#    DEFAULT_LANG: {&lt;/span&gt;
&lt;span class="c1"&gt;#        "blogging": "Meta-posts about blogging",&lt;/span&gt;
&lt;span class="c1"&gt;#        "open source": "Posts about open source software"&lt;/span&gt;
&lt;span class="c1"&gt;#    },&lt;/span&gt;
&lt;span class="c1"&gt;# }&lt;/span&gt;

&lt;span class="c1"&gt;# If you do not want to display a category publicly, you can mark it as hidden.&lt;/span&gt;
&lt;span class="c1"&gt;# The category will not be displayed on the category list page.&lt;/span&gt;
&lt;span class="c1"&gt;# Category pages will still be generated.&lt;/span&gt;
&lt;span class="n"&gt;HIDDEN_CATEGORIES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="c1"&gt;# A list of dictionaries specifying categories which translate to each other.&lt;/span&gt;
&lt;span class="c1"&gt;# Format: a list of dicts {language: translation, language2: translation2, …}&lt;/span&gt;
&lt;span class="c1"&gt;# See TAG_TRANSLATIONS example above.&lt;/span&gt;
&lt;span class="c1"&gt;# CATEGORY_TRANSLATIONS = []&lt;/span&gt;

&lt;span class="c1"&gt;# If set to True, a category in a language will be treated as a translation&lt;/span&gt;
&lt;span class="c1"&gt;# of the literally same category in all other languages. Enable this if you&lt;/span&gt;
&lt;span class="c1"&gt;# do not translate categories, for example.&lt;/span&gt;
&lt;span class="c1"&gt;# CATEGORY_TRANSLATIONS_ADD_DEFAULTS = True&lt;/span&gt;

&lt;span class="c1"&gt;# If no category is specified in a post, the destination path of the post&lt;/span&gt;
&lt;span class="c1"&gt;# can be used in its place. This replaces the sections feature. Using&lt;/span&gt;
&lt;span class="c1"&gt;# category hierarchies is recommended.&lt;/span&gt;
&lt;span class="c1"&gt;# CATEGORY_DESTPATH_AS_DEFAULT = False&lt;/span&gt;

&lt;span class="c1"&gt;# If True, the prefix will be trimmed from the category name, eg. if the&lt;/span&gt;
&lt;span class="c1"&gt;# POSTS destination is "foo/bar", and the path is "foo/bar/baz/quux",&lt;/span&gt;
&lt;span class="c1"&gt;# the category will be "baz/quux" (or "baz" if only the first directory is considered).&lt;/span&gt;
&lt;span class="c1"&gt;# Note that prefixes coming from translations are always ignored.&lt;/span&gt;
&lt;span class="c1"&gt;# CATEGORY_DESTPATH_TRIM_PREFIX = False&lt;/span&gt;

&lt;span class="c1"&gt;# If True, only the first directory of a path will be used.&lt;/span&gt;
&lt;span class="c1"&gt;# CATEGORY_DESTPATH_FIRST_DIRECTORY_ONLY = True&lt;/span&gt;

&lt;span class="c1"&gt;# Map paths to prettier category names. (translatable)&lt;/span&gt;
&lt;span class="c1"&gt;# CATEGORY_DESTPATH_NAMES = {&lt;/span&gt;
&lt;span class="c1"&gt;#    DEFAULT_LANG: {&lt;/span&gt;
&lt;span class="c1"&gt;#        'webdev': 'Web Development',&lt;/span&gt;
&lt;span class="c1"&gt;#        'webdev/django': 'Web Development/Django',&lt;/span&gt;
&lt;span class="c1"&gt;#        'random': 'Odds and Ends',&lt;/span&gt;
&lt;span class="c1"&gt;#    },&lt;/span&gt;
&lt;span class="c1"&gt;# }&lt;/span&gt;

&lt;span class="c1"&gt;# By default, category indexes will appear in CATEGORY_PATH and use&lt;/span&gt;
&lt;span class="c1"&gt;# CATEGORY_PREFIX. If this is enabled, those settings will be ignored (except&lt;/span&gt;
&lt;span class="c1"&gt;# for the index) and instead, they will follow destination paths (eg. category&lt;/span&gt;
&lt;span class="c1"&gt;# 'foo' might appear in 'posts/foo'). If the category does not come from a&lt;/span&gt;
&lt;span class="c1"&gt;# destpath, first entry in POSTS followed by the category name will be used.&lt;/span&gt;
&lt;span class="c1"&gt;# For this setting, category hierarchies are required and cannot be flattened.&lt;/span&gt;
&lt;span class="c1"&gt;# CATEGORY_PAGES_FOLLOW_DESTPATH = False&lt;/span&gt;

&lt;span class="c1"&gt;# If ENABLE_AUTHOR_PAGES is set to True and there is more than one&lt;/span&gt;
&lt;span class="c1"&gt;# author, author pages are generated.&lt;/span&gt;
&lt;span class="c1"&gt;# ENABLE_AUTHOR_PAGES = True&lt;/span&gt;

&lt;span class="c1"&gt;# Path to author pages. Final locations are:&lt;/span&gt;
&lt;span class="c1"&gt;# output / TRANSLATION[lang] / AUTHOR_PATH / index.html (list of authors)&lt;/span&gt;
&lt;span class="c1"&gt;# output / TRANSLATION[lang] / AUTHOR_PATH / author.html (list of posts by an author)&lt;/span&gt;
&lt;span class="c1"&gt;# output / TRANSLATION[lang] / AUTHOR_PATH / author RSS_EXTENSION (RSS feed for an author)&lt;/span&gt;
&lt;span class="c1"&gt;# (translatable)&lt;/span&gt;
&lt;span class="c1"&gt;# AUTHOR_PATH = "authors"&lt;/span&gt;

&lt;span class="c1"&gt;# If AUTHOR_PAGES_ARE_INDEXES is set to True, each author's page will contain&lt;/span&gt;
&lt;span class="c1"&gt;# the posts themselves. If set to False, it will be just a list of links.&lt;/span&gt;
&lt;span class="c1"&gt;# AUTHOR_PAGES_ARE_INDEXES = False&lt;/span&gt;

&lt;span class="c1"&gt;# Set descriptions for author pages to make them more interesting. The&lt;/span&gt;
&lt;span class="c1"&gt;# default is no description. The value is used in the meta description&lt;/span&gt;
&lt;span class="c1"&gt;# and displayed underneath the author list or index page’s title.&lt;/span&gt;
&lt;span class="c1"&gt;# AUTHOR_PAGES_DESCRIPTIONS = {&lt;/span&gt;
&lt;span class="c1"&gt;#    DEFAULT_LANG: {&lt;/span&gt;
&lt;span class="c1"&gt;#        "Juanjo Conti": "Python coder and writer.",&lt;/span&gt;
&lt;span class="c1"&gt;#        "Roberto Alsina": "Nikola father."&lt;/span&gt;
&lt;span class="c1"&gt;#    },&lt;/span&gt;
&lt;span class="c1"&gt;# }&lt;/span&gt;


&lt;span class="c1"&gt;# If you do not want to display an author publicly, you can mark it as hidden.&lt;/span&gt;
&lt;span class="c1"&gt;# The author will not be displayed on the author list page and posts.&lt;/span&gt;
&lt;span class="c1"&gt;# Tag pages will still be generated.&lt;/span&gt;
&lt;span class="n"&gt;HIDDEN_AUTHORS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Guest'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Allow multiple, comma-separated authors for a post? (Requires theme support, present in built-in themes)&lt;/span&gt;
&lt;span class="c1"&gt;# MULTIPLE_AUTHORS_PER_POST = False&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;# Optional HTML that displayed on “main” blog index.html files.&lt;/span&gt;
&lt;span class="c1"&gt;# May be used for a greeting. (translatable)&lt;/span&gt;
&lt;span class="n"&gt;FRONT_INDEX_HEADER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;DEFAULT_LANG&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# Create per-month archives instead of per-year&lt;/span&gt;
&lt;span class="c1"&gt;# CREATE_MONTHLY_ARCHIVE = False&lt;/span&gt;
&lt;span class="c1"&gt;# Create one large archive instead of per-year&lt;/span&gt;
&lt;span class="c1"&gt;# CREATE_SINGLE_ARCHIVE = False&lt;/span&gt;
&lt;span class="c1"&gt;# Create year, month, and day archives each with a (long) list of posts&lt;/span&gt;
&lt;span class="c1"&gt;# (overrides both CREATE_MONTHLY_ARCHIVE and CREATE_SINGLE_ARCHIVE)&lt;/span&gt;
&lt;span class="c1"&gt;# CREATE_FULL_ARCHIVES = False&lt;/span&gt;
&lt;span class="c1"&gt;# If monthly archives or full archives are created, adds also one archive per day&lt;/span&gt;
&lt;span class="c1"&gt;# CREATE_DAILY_ARCHIVE = False&lt;/span&gt;
&lt;span class="c1"&gt;# Create previous, up, next navigation links for archives&lt;/span&gt;
&lt;span class="c1"&gt;# CREATE_ARCHIVE_NAVIGATION = False&lt;/span&gt;
&lt;span class="c1"&gt;# Final locations for the archives are:&lt;/span&gt;
&lt;span class="c1"&gt;# output / TRANSLATION[lang] / ARCHIVE_PATH / ARCHIVE_FILENAME&lt;/span&gt;
&lt;span class="c1"&gt;# output / TRANSLATION[lang] / ARCHIVE_PATH / YEAR / index.html&lt;/span&gt;
&lt;span class="c1"&gt;# output / TRANSLATION[lang] / ARCHIVE_PATH / YEAR / MONTH / index.html&lt;/span&gt;
&lt;span class="c1"&gt;# output / TRANSLATION[lang] / ARCHIVE_PATH / YEAR / MONTH / DAY / index.html&lt;/span&gt;
&lt;span class="c1"&gt;# (translatable)&lt;/span&gt;
&lt;span class="c1"&gt;# ARCHIVE_PATH = ""&lt;/span&gt;
&lt;span class="c1"&gt;# ARCHIVE_FILENAME = "archive.html"&lt;/span&gt;

&lt;span class="c1"&gt;# If ARCHIVES_ARE_INDEXES is set to True, each archive page which contains a list&lt;/span&gt;
&lt;span class="c1"&gt;# of posts will contain the posts themselves. If set to False, it will be just a&lt;/span&gt;
&lt;span class="c1"&gt;# list of links.&lt;/span&gt;
&lt;span class="c1"&gt;# ARCHIVES_ARE_INDEXES = False&lt;/span&gt;

&lt;span class="c1"&gt;# URLs to other posts/pages can take 3 forms:&lt;/span&gt;
&lt;span class="c1"&gt;# rel_path: a relative URL to the current page/post (default)&lt;/span&gt;
&lt;span class="c1"&gt;# full_path: a URL with the full path from the root&lt;/span&gt;
&lt;span class="c1"&gt;# absolute: a complete URL (that includes the SITE_URL)&lt;/span&gt;
&lt;span class="c1"&gt;# URL_TYPE = 'rel_path'&lt;/span&gt;

&lt;span class="c1"&gt;# Extension for RSS feed files&lt;/span&gt;
&lt;span class="c1"&gt;# RSS_EXTENSION = ".xml"&lt;/span&gt;

&lt;span class="c1"&gt;# RSS filename base (without extension); used for indexes and galleries.&lt;/span&gt;
&lt;span class="c1"&gt;# (translatable)&lt;/span&gt;
&lt;span class="c1"&gt;# RSS_FILENAME_BASE = "rss"&lt;/span&gt;

&lt;span class="c1"&gt;# Final location for the blog main RSS feed is:&lt;/span&gt;
&lt;span class="c1"&gt;# output / TRANSLATION[lang] / RSS_PATH / RSS_FILENAME_BASE RSS_EXTENSION&lt;/span&gt;
&lt;span class="c1"&gt;# (translatable)&lt;/span&gt;
&lt;span class="c1"&gt;# RSS_PATH = ""&lt;/span&gt;

&lt;span class="c1"&gt;# Final location for the blog main Atom feed is:&lt;/span&gt;
&lt;span class="c1"&gt;# output / TRANSLATION[lang] / ATOM_PATH / ATOM_FILENAME_BASE ATOM_EXTENSION&lt;/span&gt;
&lt;span class="c1"&gt;# (translatable)&lt;/span&gt;
&lt;span class="c1"&gt;# ATOM_PATH = ""&lt;/span&gt;

&lt;span class="c1"&gt;# Atom filename base (without extension); used for indexes.&lt;/span&gt;
&lt;span class="c1"&gt;# (translatable)&lt;/span&gt;
&lt;span class="n"&gt;ATOM_FILENAME_BASE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"feed"&lt;/span&gt;

&lt;span class="c1"&gt;# Extension for Atom feed files&lt;/span&gt;
&lt;span class="c1"&gt;# ATOM_EXTENSION = ".atom"&lt;/span&gt;

&lt;span class="c1"&gt;# Slug the Tag URL. Easier for users to type, special characters are&lt;/span&gt;
&lt;span class="c1"&gt;# often removed or replaced as well.&lt;/span&gt;
&lt;span class="c1"&gt;# SLUG_TAG_PATH = True&lt;/span&gt;

&lt;span class="c1"&gt;# Slug the Author URL. Easier for users to type, special characters are&lt;/span&gt;
&lt;span class="c1"&gt;# often removed or replaced as well.&lt;/span&gt;
&lt;span class="c1"&gt;# SLUG_AUTHOR_PATH = True&lt;/span&gt;

&lt;span class="c1"&gt;# A list of redirection tuples, [("foo/from.html", "/bar/to.html")].&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# A HTML file will be created in output/foo/from.html that redirects&lt;/span&gt;
&lt;span class="c1"&gt;# to the "/bar/to.html" URL. notice that the "from" side MUST be a&lt;/span&gt;
&lt;span class="c1"&gt;# relative URL.&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# If you don't need any of these, just set to []&lt;/span&gt;
&lt;span class="n"&gt;REDIRECTIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="c1"&gt;# Presets of commands to execute to deploy. Can be anything, for&lt;/span&gt;
&lt;span class="c1"&gt;# example, you may use rsync:&lt;/span&gt;
&lt;span class="c1"&gt;# "rsync -rav --delete output/ joe@my.site:/srv/www/site"&lt;/span&gt;
&lt;span class="c1"&gt;# And then do a backup, or run `nikola ping` from the `ping`&lt;/span&gt;
&lt;span class="c1"&gt;# plugin (`nikola plugin -i ping`).  Or run `nikola check -l`.&lt;/span&gt;
&lt;span class="c1"&gt;# You may also want to use github_deploy (see below).&lt;/span&gt;
&lt;span class="c1"&gt;# You can define multiple presets and specify them as arguments&lt;/span&gt;
&lt;span class="c1"&gt;# to `nikola deploy`.  If no arguments are specified, a preset&lt;/span&gt;
&lt;span class="c1"&gt;# named `default` will be executed.  You can use as many presets&lt;/span&gt;
&lt;span class="c1"&gt;# in a `nikola deploy` command as you like.&lt;/span&gt;
&lt;span class="c1"&gt;# DEPLOY_COMMANDS = {&lt;/span&gt;
&lt;span class="c1"&gt;#     'default': [&lt;/span&gt;
&lt;span class="c1"&gt;#         "rsync -rav --delete output/ joe@my.site:/srv/www/site",&lt;/span&gt;
&lt;span class="c1"&gt;#     ]&lt;/span&gt;
&lt;span class="c1"&gt;# }&lt;/span&gt;

&lt;span class="c1"&gt;# github_deploy configuration&lt;/span&gt;
&lt;span class="c1"&gt;# For more details, read the manual:&lt;/span&gt;
&lt;span class="c1"&gt;# https://getnikola.com/handbook.html#deploying-to-github&lt;/span&gt;
&lt;span class="c1"&gt;# You will need to configure the deployment branch on GitHub.&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;deploy&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;# Where the output site should be located&lt;/span&gt;
&lt;span class="c1"&gt;# If you don't use an absolute path, it will be considered as relative&lt;/span&gt;
&lt;span class="c1"&gt;# to the location of conf.py&lt;/span&gt;
&lt;span class="c1"&gt;# OUTPUT_FOLDER = 'output'&lt;/span&gt;

&lt;span class="c1"&gt;# where the "cache" of partial generated content should be located&lt;/span&gt;
&lt;span class="c1"&gt;# default: 'cache'&lt;/span&gt;
&lt;span class="c1"&gt;# CACHE_FOLDER = 'cache'&lt;/span&gt;

&lt;span class="c1"&gt;# Filters to apply to the output.&lt;/span&gt;
&lt;span class="c1"&gt;# A directory where the keys are either: a file extensions, or&lt;/span&gt;
&lt;span class="c1"&gt;# a tuple of file extensions.&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# And the value is a list of commands to be applied in order.&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Each command must be either:&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# A string containing a '%s' which will&lt;/span&gt;
&lt;span class="c1"&gt;# be replaced with a filename. The command *must* produce output&lt;/span&gt;
&lt;span class="c1"&gt;# in place.&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Or:&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# A python callable, which will be called with the filename as&lt;/span&gt;
&lt;span class="c1"&gt;# argument.&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# By default, only .php files uses filters to inject PHP into&lt;/span&gt;
&lt;span class="c1"&gt;# Nikola’s templates. All other filters must be enabled through FILTERS.&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Many filters are shipped with Nikola. A list is available in the manual:&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;lt;https://getnikola.com/handbook.html#post-processing-filters&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# from nikola import filters&lt;/span&gt;
&lt;span class="c1"&gt;# FILTERS = {&lt;/span&gt;
&lt;span class="c1"&gt;#    ".html": [filters.typogrify],&lt;/span&gt;
&lt;span class="c1"&gt;#    ".js": [filters.closure_compiler],&lt;/span&gt;
&lt;span class="c1"&gt;#    ".jpg": ["jpegoptim --strip-all -m75 -v %s"],&lt;/span&gt;
&lt;span class="c1"&gt;# }&lt;/span&gt;

&lt;span class="c1"&gt;# Executable for the "yui_compressor" filter (defaults to 'yui-compressor').&lt;/span&gt;
&lt;span class="c1"&gt;# YUI_COMPRESSOR_EXECUTABLE = 'yui-compressor'&lt;/span&gt;

&lt;span class="c1"&gt;# Executable for the "closure_compiler" filter (defaults to 'closure-compiler').&lt;/span&gt;
&lt;span class="c1"&gt;# CLOSURE_COMPILER_EXECUTABLE = 'closure-compiler'&lt;/span&gt;

&lt;span class="c1"&gt;# Executable for the "optipng" filter (defaults to 'optipng').&lt;/span&gt;
&lt;span class="c1"&gt;# OPTIPNG_EXECUTABLE = 'optipng'&lt;/span&gt;

&lt;span class="c1"&gt;# Executable for the "jpegoptim" filter (defaults to 'jpegoptim').&lt;/span&gt;
&lt;span class="c1"&gt;# JPEGOPTIM_EXECUTABLE = 'jpegoptim'&lt;/span&gt;

&lt;span class="c1"&gt;# Executable for the "html_tidy_withconfig", "html_tidy_nowrap",&lt;/span&gt;
&lt;span class="c1"&gt;# "html_tidy_wrap", "html_tidy_wrap_attr" and "html_tidy_mini" filters&lt;/span&gt;
&lt;span class="c1"&gt;# (defaults to 'tidy5').&lt;/span&gt;
&lt;span class="c1"&gt;# HTML_TIDY_EXECUTABLE = 'tidy5'&lt;/span&gt;

&lt;span class="c1"&gt;# List of XPath expressions which should be used for finding headers&lt;/span&gt;
&lt;span class="c1"&gt;# ({hx} is replaced by headers h1 through h6).&lt;/span&gt;
&lt;span class="c1"&gt;# You must change this if you use a custom theme that does not use&lt;/span&gt;
&lt;span class="c1"&gt;# "e-content entry-content" as a class for post and page contents.&lt;/span&gt;
&lt;span class="c1"&gt;# HEADER_PERMALINKS_XPATH_LIST = ['*//div[@class="e-content entry-content"]//{hx}']&lt;/span&gt;
&lt;span class="c1"&gt;# Include *every* header (not recommended):&lt;/span&gt;
&lt;span class="c1"&gt;# HEADER_PERMALINKS_XPATH_LIST = ['*//{hx}']&lt;/span&gt;

&lt;span class="c1"&gt;# File blacklist for header permalinks. Contains output path&lt;/span&gt;
&lt;span class="c1"&gt;# (eg. 'output/index.html')&lt;/span&gt;
&lt;span class="c1"&gt;# HEADER_PERMALINKS_FILE_BLACKLIST = []&lt;/span&gt;

&lt;span class="c1"&gt;# Expert setting! Create a gzipped copy of each generated file. Cheap server-&lt;/span&gt;
&lt;span class="c1"&gt;# side optimization for very high traffic sites or low memory servers.&lt;/span&gt;
&lt;span class="c1"&gt;# GZIP_FILES = False&lt;/span&gt;
&lt;span class="c1"&gt;# File extensions that will be compressed&lt;/span&gt;
&lt;span class="c1"&gt;# GZIP_EXTENSIONS = ('.txt', '.htm', '.html', '.css', '.js', '.json', '.atom', '.xml')&lt;/span&gt;
&lt;span class="c1"&gt;# Use an external gzip command? None means no.&lt;/span&gt;
&lt;span class="c1"&gt;# Example: GZIP_COMMAND = "pigz -k {filename}"&lt;/span&gt;
&lt;span class="c1"&gt;# GZIP_COMMAND = None&lt;/span&gt;
&lt;span class="c1"&gt;# Make sure the server does not return a "Accept-Ranges: bytes" header for&lt;/span&gt;
&lt;span class="c1"&gt;# files compressed by this option! OR make sure that a ranged request does not&lt;/span&gt;
&lt;span class="c1"&gt;# return partial content of another representation for these resources. Do not&lt;/span&gt;
&lt;span class="c1"&gt;# use this feature if you do not understand what this means.&lt;/span&gt;

&lt;span class="c1"&gt;# #############################################################################&lt;/span&gt;
&lt;span class="c1"&gt;# Image Gallery Options&lt;/span&gt;
&lt;span class="c1"&gt;# #############################################################################&lt;/span&gt;

&lt;span class="c1"&gt;# One or more folders containing galleries. The format is a dictionary of&lt;/span&gt;
&lt;span class="c1"&gt;# {"source": "relative_destination"}, where galleries are looked for in&lt;/span&gt;
&lt;span class="c1"&gt;# "source/" and the results will be located in&lt;/span&gt;
&lt;span class="c1"&gt;# "OUTPUT_PATH/relative_destination/gallery_name"&lt;/span&gt;
&lt;span class="c1"&gt;# Default is:&lt;/span&gt;
&lt;span class="c1"&gt;# GALLERY_FOLDERS = {"galleries": "galleries"}&lt;/span&gt;
&lt;span class="c1"&gt;# More gallery options:&lt;/span&gt;
&lt;span class="c1"&gt;# THUMBNAIL_SIZE = 180&lt;/span&gt;
&lt;span class="c1"&gt;# MAX_IMAGE_SIZE = 1280&lt;/span&gt;
&lt;span class="c1"&gt;# USE_FILENAME_AS_TITLE = True&lt;/span&gt;
&lt;span class="c1"&gt;# EXTRA_IMAGE_EXTENSIONS = []&lt;/span&gt;

&lt;span class="c1"&gt;# Use a thumbnail (defined by ".. previewimage:" in the gallery's index) in&lt;/span&gt;
&lt;span class="c1"&gt;# list of galleries for each gallery&lt;/span&gt;
&lt;span class="n"&gt;GALLERIES_USE_THUMBNAIL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;

&lt;span class="c1"&gt;# Image to use as thumbnail for those galleries that don't have one&lt;/span&gt;
&lt;span class="c1"&gt;# None: show a grey square&lt;/span&gt;
&lt;span class="c1"&gt;# '/url/to/file': show the image in that url&lt;/span&gt;
&lt;span class="n"&gt;GALLERIES_DEFAULT_THUMBNAIL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;

&lt;span class="c1"&gt;# If set to False, it will sort by filename instead. Defaults to True&lt;/span&gt;
&lt;span class="c1"&gt;# GALLERY_SORT_BY_DATE = True&lt;/span&gt;

&lt;span class="c1"&gt;# If set to True, EXIF data will be copied when an image is thumbnailed or&lt;/span&gt;
&lt;span class="c1"&gt;# resized. (See also EXIF_WHITELIST)&lt;/span&gt;
&lt;span class="c1"&gt;# PRESERVE_EXIF_DATA = False&lt;/span&gt;

&lt;span class="c1"&gt;# If you have enabled PRESERVE_EXIF_DATA, this option lets you choose EXIF&lt;/span&gt;
&lt;span class="c1"&gt;# fields you want to keep in images. (See also PRESERVE_EXIF_DATA)&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# For a full list of field names, please see here:&lt;/span&gt;
&lt;span class="c1"&gt;# http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# This is a dictionary of lists. Each key in the dictionary is the&lt;/span&gt;
&lt;span class="c1"&gt;# name of a IDF, and each list item is a field you want to preserve.&lt;/span&gt;
&lt;span class="c1"&gt;# If you have a IDF with only a '*' item, *EVERY* item in it will be&lt;/span&gt;
&lt;span class="c1"&gt;# preserved. If you don't want to preserve anything in a IDF, remove it&lt;/span&gt;
&lt;span class="c1"&gt;# from the setting. By default, no EXIF information is kept.&lt;/span&gt;
&lt;span class="c1"&gt;# Setting the whitelist to anything other than {} implies&lt;/span&gt;
&lt;span class="c1"&gt;# PRESERVE_EXIF_DATA is set to True&lt;/span&gt;
&lt;span class="c1"&gt;# To preserve ALL EXIF data, set EXIF_WHITELIST to {"*": "*"}&lt;/span&gt;

&lt;span class="c1"&gt;# EXIF_WHITELIST = {}&lt;/span&gt;

&lt;span class="c1"&gt;# Some examples of EXIF_WHITELIST settings:&lt;/span&gt;

&lt;span class="c1"&gt;# Basic image information:&lt;/span&gt;
&lt;span class="c1"&gt;# EXIF_WHITELIST['0th'] = [&lt;/span&gt;
&lt;span class="c1"&gt;#    "Orientation",&lt;/span&gt;
&lt;span class="c1"&gt;#    "XResolution",&lt;/span&gt;
&lt;span class="c1"&gt;#    "YResolution",&lt;/span&gt;
&lt;span class="c1"&gt;# ]&lt;/span&gt;

&lt;span class="c1"&gt;# If you want to keep GPS data in the images:&lt;/span&gt;
&lt;span class="c1"&gt;# EXIF_WHITELIST['GPS'] = ["*"]&lt;/span&gt;

&lt;span class="c1"&gt;# Embedded thumbnail information:&lt;/span&gt;
&lt;span class="c1"&gt;# EXIF_WHITELIST['1st'] = ["*"]&lt;/span&gt;

&lt;span class="c1"&gt;# If set to True, any ICC profile will be copied when an image is thumbnailed or&lt;/span&gt;
&lt;span class="c1"&gt;# resized.&lt;/span&gt;
&lt;span class="c1"&gt;# PRESERVE_ICC_PROFILES = False&lt;/span&gt;

&lt;span class="c1"&gt;# Folders containing images to be used in normal posts or pages.&lt;/span&gt;
&lt;span class="c1"&gt;# IMAGE_FOLDERS is a dictionary of the form {"source": "destination"},&lt;/span&gt;
&lt;span class="c1"&gt;# where "source" is the folder containing the images to be published, and&lt;/span&gt;
&lt;span class="c1"&gt;# "destination" is the folder under OUTPUT_PATH containing the images copied&lt;/span&gt;
&lt;span class="c1"&gt;# to the site. Thumbnail images will be created there as well.&lt;/span&gt;

&lt;span class="c1"&gt;# To reference the images in your posts, include a leading slash in the path.&lt;/span&gt;
&lt;span class="c1"&gt;# For example, if IMAGE_FOLDERS = {'images': 'images'}, write&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;#   .. image:: /images/tesla.jpg&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# See the Nikola Handbook for details (in the “Embedding Images” and&lt;/span&gt;
&lt;span class="c1"&gt;# “Thumbnails” sections)&lt;/span&gt;

&lt;span class="c1"&gt;# Images will be scaled down according to IMAGE_THUMBNAIL_SIZE and MAX_IMAGE_SIZE&lt;/span&gt;
&lt;span class="c1"&gt;# options, but will have to be referenced manually to be visible on the site&lt;/span&gt;
&lt;span class="c1"&gt;# (the thumbnail has ``.thumbnail`` added before the file extension by default,&lt;/span&gt;
&lt;span class="c1"&gt;# but a different naming template can be configured with IMAGE_THUMBNAIL_FORMAT).&lt;/span&gt;

&lt;span class="n"&gt;IMAGE_FOLDERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'images'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'images'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;# IMAGE_THUMBNAIL_SIZE = 400&lt;/span&gt;
&lt;span class="c1"&gt;# IMAGE_THUMBNAIL_FORMAT = '{name}.thumbnail{ext}'&lt;/span&gt;

&lt;span class="c1"&gt;# #############################################################################&lt;/span&gt;
&lt;span class="c1"&gt;# HTML fragments and diverse things that are used by the templates&lt;/span&gt;
&lt;span class="c1"&gt;# #############################################################################&lt;/span&gt;

&lt;span class="c1"&gt;# Data about post-per-page indexes.&lt;/span&gt;
&lt;span class="c1"&gt;# INDEXES_PAGES defaults to ' old posts, page %d' or ' page %d' (translated),&lt;/span&gt;
&lt;span class="c1"&gt;# depending on the value of INDEXES_PAGES_MAIN.&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# (translatable) If the following is empty, defaults to BLOG_TITLE:&lt;/span&gt;
&lt;span class="c1"&gt;# INDEXES_TITLE = ""&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# (translatable) If the following is empty, defaults to ' [old posts,] page %d' (see above):&lt;/span&gt;
&lt;span class="c1"&gt;# INDEXES_PAGES = ""&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# If the following is True, INDEXES_PAGES is also displayed on the main (the&lt;/span&gt;
&lt;span class="c1"&gt;# newest) index page (index.html):&lt;/span&gt;
&lt;span class="c1"&gt;# INDEXES_PAGES_MAIN = False&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# If the following is True, index-1.html has the oldest posts, index-2.html the&lt;/span&gt;
&lt;span class="c1"&gt;# second-oldest posts, etc., and index.html has the newest posts. This ensures&lt;/span&gt;
&lt;span class="c1"&gt;# that all posts on index-x.html will forever stay on that page, now matter how&lt;/span&gt;
&lt;span class="c1"&gt;# many new posts are added.&lt;/span&gt;
&lt;span class="c1"&gt;# If False, index-1.html has the second-newest posts, index-2.html the third-newest,&lt;/span&gt;
&lt;span class="c1"&gt;# and index-n.html the oldest posts. When this is active, old posts can be moved&lt;/span&gt;
&lt;span class="c1"&gt;# to other index pages when new posts are added.&lt;/span&gt;
&lt;span class="c1"&gt;# INDEXES_STATIC = True&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# (translatable) If PRETTY_URLS is set to True, this setting will be used to create&lt;/span&gt;
&lt;span class="c1"&gt;# prettier URLs for index pages, such as page/2/index.html instead of index-2.html.&lt;/span&gt;
&lt;span class="c1"&gt;# Valid values for this settings are:&lt;/span&gt;
&lt;span class="c1"&gt;#   * False,&lt;/span&gt;
&lt;span class="c1"&gt;#   * a list or tuple, specifying the path to be generated,&lt;/span&gt;
&lt;span class="c1"&gt;#   * a dictionary mapping languages to lists or tuples.&lt;/span&gt;
&lt;span class="c1"&gt;# Every list or tuple must consist of strings which are used to combine the path;&lt;/span&gt;
&lt;span class="c1"&gt;# for example:&lt;/span&gt;
&lt;span class="c1"&gt;#     ['page', '{number}', '{index_file}']&lt;/span&gt;
&lt;span class="c1"&gt;# The replacements&lt;/span&gt;
&lt;span class="c1"&gt;#     {number}     --&amp;gt; (logical) page number;&lt;/span&gt;
&lt;span class="c1"&gt;#     {old_number} --&amp;gt; the page number inserted into index-n.html before (zero for&lt;/span&gt;
&lt;span class="c1"&gt;#                      the main page);&lt;/span&gt;
&lt;span class="c1"&gt;#     {index_file} --&amp;gt; value of option INDEX_FILE&lt;/span&gt;
&lt;span class="c1"&gt;# are made.&lt;/span&gt;
&lt;span class="c1"&gt;# Note that in case INDEXES_PAGES_MAIN is set to True, a redirection will be created&lt;/span&gt;
&lt;span class="c1"&gt;# for the full URL with the page number of the main page to the normal (shorter) main&lt;/span&gt;
&lt;span class="c1"&gt;# page URL.&lt;/span&gt;
&lt;span class="c1"&gt;# INDEXES_PRETTY_PAGE_URL = False&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# If the following is true, a page range navigation will be inserted to indices.&lt;/span&gt;
&lt;span class="c1"&gt;# Please note that this will undo the effect of INDEXES_STATIC, as all index pages&lt;/span&gt;
&lt;span class="c1"&gt;# must be recreated whenever the number of pages changes.&lt;/span&gt;
&lt;span class="c1"&gt;# SHOW_INDEX_PAGE_NAVIGATION = False&lt;/span&gt;

&lt;span class="c1"&gt;# If the following is True, a meta name="generator" tag is added to pages. The&lt;/span&gt;
&lt;span class="c1"&gt;# generator tag is used to specify the software used to generate the page&lt;/span&gt;
&lt;span class="c1"&gt;# (it promotes Nikola).&lt;/span&gt;
&lt;span class="c1"&gt;# META_GENERATOR_TAG = True&lt;/span&gt;

&lt;span class="c1"&gt;# Color scheme to be used for code blocks. If your theme provides&lt;/span&gt;
&lt;span class="c1"&gt;# "assets/css/code.css" this is ignored. Set to None to disable.&lt;/span&gt;
&lt;span class="c1"&gt;# Can be any of:&lt;/span&gt;
&lt;span class="c1"&gt;# algol, algol_nu, autumn, borland, bw, colorful, default, emacs, friendly,&lt;/span&gt;
&lt;span class="c1"&gt;# fruity, igor, lovelace, manni, monokai, murphy, native, paraiso-dark,&lt;/span&gt;
&lt;span class="c1"&gt;# paraiso-light, pastie, perldoc, rrt, tango, trac, vim, vs, xcode&lt;/span&gt;
&lt;span class="c1"&gt;# This list MAY be incomplete since pygments adds styles every now and then.&lt;/span&gt;
&lt;span class="c1"&gt;# Check with list(pygments.styles.get_all_styles()) in an interpreter.&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# CODE_COLOR_SCHEME = 'default'&lt;/span&gt;

&lt;span class="c1"&gt;# FAVICONS contains (name, file, size) tuples.&lt;/span&gt;
&lt;span class="c1"&gt;# Used to create favicon link like this:&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;lt;link rel="name" href="file" sizes="size"/&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;# FAVICONS = (&lt;/span&gt;
&lt;span class="c1"&gt;#     ("icon", "/favicon.ico", "16x16"),&lt;/span&gt;
&lt;span class="c1"&gt;#     ("icon", "/icon_128x128.png", "128x128"),&lt;/span&gt;
&lt;span class="c1"&gt;# )&lt;/span&gt;

&lt;span class="c1"&gt;# Show teasers (instead of full posts) in indexes? Defaults to False.&lt;/span&gt;
&lt;span class="c1"&gt;# INDEX_TEASERS = False&lt;/span&gt;

&lt;span class="c1"&gt;# HTML fragments with the Read more... links.&lt;/span&gt;
&lt;span class="c1"&gt;# The following tags exist and are replaced for you:&lt;/span&gt;
&lt;span class="c1"&gt;# {link}                        A link to the full post page.&lt;/span&gt;
&lt;span class="c1"&gt;# {read_more}                   The string “Read more” in the current language.&lt;/span&gt;
&lt;span class="c1"&gt;# {reading_time}                An estimate of how long it will take to read the post.&lt;/span&gt;
&lt;span class="c1"&gt;# {remaining_reading_time}      An estimate of how long it will take to read the post, sans the teaser.&lt;/span&gt;
&lt;span class="c1"&gt;# {min_remaining_read}          The string “{remaining_reading_time} min remaining to read” in the current language.&lt;/span&gt;
&lt;span class="c1"&gt;# {paragraph_count}             The amount of paragraphs in the post.&lt;/span&gt;
&lt;span class="c1"&gt;# {remaining_paragraph_count}   The amount of paragraphs in the post, sans the teaser.&lt;/span&gt;
&lt;span class="c1"&gt;# {post_title}                  The title of the post.&lt;/span&gt;
&lt;span class="c1"&gt;# {{                            A literal { (U+007B LEFT CURLY BRACKET)&lt;/span&gt;
&lt;span class="c1"&gt;# }}                            A literal } (U+007D RIGHT CURLY BRACKET)&lt;/span&gt;

&lt;span class="c1"&gt;# 'Read more...' for the index page, if INDEX_TEASERS is True (translatable)&lt;/span&gt;
&lt;span class="n"&gt;INDEX_READ_MORE_LINK&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;p class="more"&amp;gt;&amp;lt;a href="&lt;/span&gt;&lt;span class="si"&gt;{link}&lt;/span&gt;&lt;span class="s1"&gt;"&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{read_more}&lt;/span&gt;&lt;span class="s1"&gt;…&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;'&lt;/span&gt;
&lt;span class="c1"&gt;# 'Read more...' for the feeds, if FEED_TEASERS is True (translatable)&lt;/span&gt;
&lt;span class="n"&gt;FEED_READ_MORE_LINK&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;p&amp;gt;&amp;lt;a href="&lt;/span&gt;&lt;span class="si"&gt;{link}&lt;/span&gt;&lt;span class="s1"&gt;"&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{read_more}&lt;/span&gt;&lt;span class="s1"&gt;…&amp;lt;/a&amp;gt; (&lt;/span&gt;&lt;span class="si"&gt;{min_remaining_read}&lt;/span&gt;&lt;span class="s1"&gt;)&amp;lt;/p&amp;gt;'&lt;/span&gt;

&lt;span class="c1"&gt;# Append a URL query to the FEED_READ_MORE_LINK in Atom and RSS feeds. Advanced&lt;/span&gt;
&lt;span class="c1"&gt;# option used for traffic source tracking.&lt;/span&gt;
&lt;span class="c1"&gt;# Minimum example for use with Piwik: "pk_campaign=feed"&lt;/span&gt;
&lt;span class="c1"&gt;# The following tags exist and are replaced for you:&lt;/span&gt;
&lt;span class="c1"&gt;# {feedRelUri}                  A relative link to the feed.&lt;/span&gt;
&lt;span class="c1"&gt;# {feedFormat}                  The name of the syndication format.&lt;/span&gt;
&lt;span class="c1"&gt;# Example using replacement for use with Google Analytics:&lt;/span&gt;
&lt;span class="c1"&gt;# "utm_source={feedRelUri}&amp;amp;utm_medium=nikola_feed&amp;amp;utm_campaign={feedFormat}_feed"&lt;/span&gt;
&lt;span class="n"&gt;FEED_LINKS_APPEND_QUERY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;

&lt;span class="c1"&gt;# A HTML fragment describing the license, for the sidebar.&lt;/span&gt;
&lt;span class="c1"&gt;# (translatable)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;license&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;# A small copyright notice for the page footer (in HTML).&lt;/span&gt;
&lt;span class="c1"&gt;# (translatable)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;footer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;# Things that will be passed to CONTENT_FOOTER.format().  This is done&lt;/span&gt;
&lt;span class="c1"&gt;# for translatability, as dicts are not formattable.  Nikola will&lt;/span&gt;
&lt;span class="c1"&gt;# intelligently format the setting properly.&lt;/span&gt;
&lt;span class="c1"&gt;# The setting takes a dict. The keys are languages. The values are&lt;/span&gt;
&lt;span class="c1"&gt;# tuples of tuples of positional arguments and dicts of keyword arguments&lt;/span&gt;
&lt;span class="c1"&gt;# to format().  For example, {'en': (('Hello'), {'target': 'World'})}&lt;/span&gt;
&lt;span class="c1"&gt;# results in CONTENT_FOOTER['en'].format('Hello', target='World').&lt;/span&gt;
&lt;span class="c1"&gt;# If you need to use the literal braces '{' and '}' in your footer text, use&lt;/span&gt;
&lt;span class="c1"&gt;# '{{' and '}}' to escape them (str.format is used)&lt;/span&gt;
&lt;span class="c1"&gt;# WARNING: If you do not use multiple languages with CONTENT_FOOTER, this&lt;/span&gt;
&lt;span class="c1"&gt;#          still needs to be a dict of this format.  (it can be empty if you&lt;/span&gt;
&lt;span class="c1"&gt;#          do not need formatting)&lt;/span&gt;
&lt;span class="c1"&gt;# (translatable)&lt;/span&gt;
&lt;span class="n"&gt;CONTENT_FOOTER_FORMATS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;DEFAULT_LANG&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
	&lt;span class="p"&gt;(),&lt;/span&gt;
	&lt;span class="p"&gt;{&lt;/span&gt;
	    &lt;span class="s2"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;BLOG_EMAIL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
	    &lt;span class="s2"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;BLOG_AUTHOR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
	    &lt;span class="s2"&gt;"date"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gmtime&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tm_year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
	    &lt;span class="s2"&gt;"license"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;LICENSE&lt;/span&gt;
	&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# A simple copyright tag for inclusion in RSS feeds that works just&lt;/span&gt;
&lt;span class="c1"&gt;# like CONTENT_FOOTER and CONTENT_FOOTER_FORMATS&lt;/span&gt;
&lt;span class="n"&gt;RSS_COPYRIGHT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Contents © &lt;/span&gt;&lt;span class="si"&gt;{date}&lt;/span&gt;&lt;span class="s1"&gt; &amp;lt;a href="mailto:&lt;/span&gt;&lt;span class="si"&gt;{email}&lt;/span&gt;&lt;span class="s1"&gt;"&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{author}&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;/a&amp;gt; &lt;/span&gt;&lt;span class="si"&gt;{license}&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;
&lt;span class="n"&gt;RSS_COPYRIGHT_PLAIN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Contents © &lt;/span&gt;&lt;span class="si"&gt;{date}&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="si"&gt;{author}&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="si"&gt;{license}&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;
&lt;span class="n"&gt;RSS_COPYRIGHT_FORMATS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CONTENT_FOOTER_FORMATS&lt;/span&gt;

&lt;span class="c1"&gt;# To use comments, you can choose between different third party comment&lt;/span&gt;
&lt;span class="c1"&gt;# systems.  The following comment systems are supported by Nikola:&lt;/span&gt;
&lt;span class="c1"&gt;#   disqus, facebook, intensedebate, isso, muut, commento, utterances&lt;/span&gt;
&lt;span class="c1"&gt;# You can leave this option blank to disable comments.&lt;/span&gt;
&lt;span class="n"&gt;COMMENT_SYSTEM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
&lt;span class="c1"&gt;# And you also need to add your COMMENT_SYSTEM_ID which&lt;/span&gt;
&lt;span class="c1"&gt;# depends on what comment system you use. The default is&lt;/span&gt;
&lt;span class="c1"&gt;# "nikolademo" which is a test account for Disqus. More information&lt;/span&gt;
&lt;span class="c1"&gt;# is in the manual.&lt;/span&gt;
&lt;span class="n"&gt;COMMENT_SYSTEM_ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;

&lt;span class="c1"&gt;# Create index.html for page folders?&lt;/span&gt;
&lt;span class="c1"&gt;# WARNING: if a page would conflict with the index file (usually&lt;/span&gt;
&lt;span class="c1"&gt;#          caused by setting slug to `index`), the PAGE_INDEX&lt;/span&gt;
&lt;span class="c1"&gt;#          will not be generated for that directory.&lt;/span&gt;
&lt;span class="c1"&gt;# PAGE_INDEX = False&lt;/span&gt;
&lt;span class="c1"&gt;# Enable comments on pages (i.e. not posts)?&lt;/span&gt;
&lt;span class="c1"&gt;# COMMENTS_IN_PAGES = False&lt;/span&gt;
&lt;span class="c1"&gt;# Enable comments on picture gallery pages?&lt;/span&gt;
&lt;span class="c1"&gt;# COMMENTS_IN_GALLERIES = False&lt;/span&gt;

&lt;span class="c1"&gt;# What file should be used for directory indexes?&lt;/span&gt;
&lt;span class="c1"&gt;# Defaults to index.html&lt;/span&gt;
&lt;span class="c1"&gt;# Common other alternatives: default.html for IIS, index.php&lt;/span&gt;
&lt;span class="c1"&gt;# INDEX_FILE = "index.html"&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;indexes&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;# List of files relative to the server root (!) that will be asked to be excluded&lt;/span&gt;
&lt;span class="c1"&gt;# from indexing and other robotic spidering. * is supported. Will only be effective&lt;/span&gt;
&lt;span class="c1"&gt;# if SITE_URL points to server root. The list is used to exclude resources from&lt;/span&gt;
&lt;span class="c1"&gt;# /robots.txt and /sitemap.xml, and to inform search engines about /sitemapindex.xml.&lt;/span&gt;
&lt;span class="c1"&gt;# ROBOTS_EXCLUSIONS = ["/archive.html", "/category/*.html"]&lt;/span&gt;

&lt;span class="c1"&gt;# Instead of putting files in &amp;lt;slug&amp;gt;.html, put them in &amp;lt;slug&amp;gt;/index.html.&lt;/span&gt;
&lt;span class="c1"&gt;# No web server configuration is required. Also enables STRIP_INDEXES.&lt;/span&gt;
&lt;span class="c1"&gt;# This can be disabled on a per-page/post basis by adding&lt;/span&gt;
&lt;span class="c1"&gt;#    .. pretty_url: False&lt;/span&gt;
&lt;span class="c1"&gt;# to the metadata.&lt;/span&gt;
&lt;span class="n"&gt;PRETTY_URLS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;

&lt;span class="c1"&gt;# If True, publish future dated posts right away instead of scheduling them.&lt;/span&gt;
&lt;span class="c1"&gt;# Defaults to False.&lt;/span&gt;
&lt;span class="c1"&gt;# FUTURE_IS_NOW = False&lt;/span&gt;

&lt;span class="c1"&gt;# If True, future dated posts are allowed in deployed output&lt;/span&gt;
&lt;span class="c1"&gt;# Only the individual posts are published/deployed; not in indexes/sitemap&lt;/span&gt;
&lt;span class="c1"&gt;# Generally, you want FUTURE_IS_NOW and DEPLOY_FUTURE to be the same value.&lt;/span&gt;
&lt;span class="c1"&gt;# DEPLOY_FUTURE = False&lt;/span&gt;
&lt;span class="c1"&gt;# If False, draft posts will not be deployed&lt;/span&gt;
&lt;span class="c1"&gt;# DEPLOY_DRAFTS = True&lt;/span&gt;

&lt;span class="c1"&gt;# Allows scheduling of posts using the rule specified here (new_post -s)&lt;/span&gt;
&lt;span class="c1"&gt;# Specify an iCal Recurrence Rule: https://www.kanzaki.com/docs/ical/rrule.html&lt;/span&gt;
&lt;span class="c1"&gt;# SCHEDULE_RULE = ''&lt;/span&gt;
&lt;span class="c1"&gt;# If True, use the scheduling rule to all posts (not pages!) by default&lt;/span&gt;
&lt;span class="c1"&gt;# SCHEDULE_ALL = False&lt;/span&gt;

&lt;span class="c1"&gt;# Do you want to add a Mathjax config file?&lt;/span&gt;
&lt;span class="c1"&gt;# MATHJAX_CONFIG = ""&lt;/span&gt;

&lt;span class="c1"&gt;# If you want support for the $.$ syntax (which may conflict with running&lt;/span&gt;
&lt;span class="c1"&gt;# text!), just use this config:&lt;/span&gt;
&lt;span class="c1"&gt;# MATHJAX_CONFIG = """&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;lt;script type="text/x-mathjax-config"&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;# MathJax.Hub.Config({&lt;/span&gt;
&lt;span class="c1"&gt;#     tex2jax: {&lt;/span&gt;
&lt;span class="c1"&gt;#         inlineMath: [ ['$','$'], ["\\\(","\\\)"] ],&lt;/span&gt;
&lt;span class="c1"&gt;#         displayMath: [ ['$$','$$'], ["\\\[","\\\]"] ],&lt;/span&gt;
&lt;span class="c1"&gt;#         processEscapes: true&lt;/span&gt;
&lt;span class="c1"&gt;#     },&lt;/span&gt;
&lt;span class="c1"&gt;#     displayAlign: 'center', // Change this to 'left' if you want left-aligned equations.&lt;/span&gt;
&lt;span class="c1"&gt;#     "HTML-CSS": {&lt;/span&gt;
&lt;span class="c1"&gt;#         styles: {'.MathJax_Display': {"margin": 0}}&lt;/span&gt;
&lt;span class="c1"&gt;#     }&lt;/span&gt;
&lt;span class="c1"&gt;# });&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;# """&lt;/span&gt;

&lt;span class="c1"&gt;# Want to use KaTeX instead of MathJax? While KaTeX may not support every&lt;/span&gt;
&lt;span class="c1"&gt;# feature yet, it's faster and the output looks better.&lt;/span&gt;
&lt;span class="c1"&gt;# USE_KATEX = False&lt;/span&gt;

&lt;span class="c1"&gt;# KaTeX auto-render settings. If you want support for the $.$ syntax (which may&lt;/span&gt;
&lt;span class="c1"&gt;# conflict with running text!), just use this config:&lt;/span&gt;
&lt;span class="c1"&gt;# KATEX_AUTO_RENDER = """&lt;/span&gt;
&lt;span class="c1"&gt;# delimiters: [&lt;/span&gt;
&lt;span class="c1"&gt;#     {left: "$$", right: "$$", display: true},&lt;/span&gt;
&lt;span class="c1"&gt;#     {left: "\\\\[", right: "\\\\]", display: true},&lt;/span&gt;
&lt;span class="c1"&gt;#     {left: "\\\\begin{equation*}", right: "\\\\end{equation*}", display: true},&lt;/span&gt;
&lt;span class="c1"&gt;#     {left: "$", right: "$", display: false},&lt;/span&gt;
&lt;span class="c1"&gt;#     {left: "\\\\(", right: "\\\\)", display: false}&lt;/span&gt;
&lt;span class="c1"&gt;# ]&lt;/span&gt;
&lt;span class="c1"&gt;# """&lt;/span&gt;

&lt;span class="c1"&gt;# Do you want to customize the nbconversion of your IPython notebook?&lt;/span&gt;
&lt;span class="c1"&gt;# IPYNB_CONFIG = {}&lt;/span&gt;
&lt;span class="c1"&gt;# With the following example configuration you can use a custom jinja template&lt;/span&gt;
&lt;span class="c1"&gt;# called `toggle.tpl` which has to be located in your site/blog main folder:&lt;/span&gt;
&lt;span class="c1"&gt;# IPYNB_CONFIG = {'Exporter': {'template_file': 'toggle'}}&lt;/span&gt;

&lt;span class="c1"&gt;# What Markdown extensions to enable?&lt;/span&gt;
&lt;span class="c1"&gt;# You will also get gist, nikola and podcast because those are&lt;/span&gt;
&lt;span class="c1"&gt;# done in the code, hope you don't mind ;-)&lt;/span&gt;
&lt;span class="c1"&gt;# Note: most Nikola-specific extensions are done via the Nikola plugin system,&lt;/span&gt;
&lt;span class="c1"&gt;#       with the MarkdownExtension class and should not be added here.&lt;/span&gt;
&lt;span class="c1"&gt;# Defaults are markdown.extensions.(fenced_code|codehilite|extra)&lt;/span&gt;
&lt;span class="c1"&gt;# markdown.extensions.meta is required for Markdown metadata.&lt;/span&gt;
&lt;span class="c1"&gt;# MARKDOWN_EXTENSIONS = ['markdown.extensions.fenced_code', 'markdown.extensions.codehilite', 'markdown.extensions.extra']&lt;/span&gt;

&lt;span class="c1"&gt;# Options to be passed to markdown extensions (See https://python-markdown.github.io/reference/)&lt;/span&gt;
&lt;span class="c1"&gt;# Default is {} (no config at all)&lt;/span&gt;
&lt;span class="c1"&gt;# MARKDOWN_EXTENSION_CONFIGS = {}&lt;/span&gt;


&lt;span class="c1"&gt;# Extra options to pass to the pandoc command, empty by default.&lt;/span&gt;
&lt;span class="c1"&gt;# It can be a list of strings or a dict (keys are file extensions).&lt;/span&gt;
&lt;span class="c1"&gt;# Example for a list of strings (used for all extensions):&lt;/span&gt;
&lt;span class="c1"&gt;# PANDOC_OPTIONS = ['-F', 'pandoc-citeproc', '--bibliography=/Users/foo/references.bib']&lt;/span&gt;
&lt;span class="c1"&gt;# Example for a dict, where the keys are the extensions in COMPILERS['pandoc']:&lt;/span&gt;
&lt;span class="c1"&gt;# COMPILERS['pandoc'] = ['.rst', '.md', '.txt']&lt;/span&gt;
&lt;span class="c1"&gt;# PANDOC_OPTIONS = {&lt;/span&gt;
&lt;span class="c1"&gt;#     '.rst': ['-t', 'rst'],&lt;/span&gt;
&lt;span class="c1"&gt;#     '.md': ['-t', 'markdown'],&lt;/span&gt;
&lt;span class="c1"&gt;#     '.txt': ['-t', 'markdown-raw_html'],&lt;/span&gt;
&lt;span class="c1"&gt;# }&lt;/span&gt;
&lt;span class="c1"&gt;# Pandoc does not demote headers by default.  To enable this, you can use, for example&lt;/span&gt;
&lt;span class="c1"&gt;# ['--base-header-level=2']&lt;/span&gt;
&lt;span class="c1"&gt;# PANDOC_OPTIONS = []&lt;/span&gt;

&lt;span class="c1"&gt;# Social buttons. This is sample code for AddThis (which was the default for a&lt;/span&gt;
&lt;span class="c1"&gt;# long time). Insert anything you want here, or even make it empty (which is&lt;/span&gt;
&lt;span class="c1"&gt;# the default right now)&lt;/span&gt;
&lt;span class="c1"&gt;# (translatable)&lt;/span&gt;
&lt;span class="c1"&gt;# SOCIAL_BUTTONS_CODE = """&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;lt;!-- Social buttons --&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;lt;div id="addthisbox" class="addthis_toolbox addthis_peekaboo_style addthis_default_style addthis_label_style addthis_32x32_style"&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;lt;a class="addthis_button_more"&amp;gt;Share&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;&amp;lt;a class="addthis_button_facebook"&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;lt;li&amp;gt;&amp;lt;a class="addthis_button_google_plusone_share"&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;lt;li&amp;gt;&amp;lt;a class="addthis_button_linkedin"&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;lt;li&amp;gt;&amp;lt;a class="addthis_button_twitter"&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;lt;script src="https://s7.addthis.com/js/300/addthis_widget.js#pubid=ra-4f7088a56bb93798"&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;lt;!-- End of social buttons --&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;# """&lt;/span&gt;

&lt;span class="c1"&gt;# Show link to source for the posts?&lt;/span&gt;
&lt;span class="c1"&gt;# SHOW_SOURCELINK = True&lt;/span&gt;
&lt;span class="c1"&gt;# Copy the source files for your pages?&lt;/span&gt;
&lt;span class="c1"&gt;# Setting it to False implies SHOW_SOURCELINK = False&lt;/span&gt;
&lt;span class="c1"&gt;# COPY_SOURCES = True&lt;/span&gt;

&lt;span class="c1"&gt;# Modify the number of Post per Index Page&lt;/span&gt;
&lt;span class="c1"&gt;# Defaults to 10&lt;/span&gt;
&lt;span class="c1"&gt;# INDEX_DISPLAY_POST_COUNT = 10&lt;/span&gt;

&lt;span class="c1"&gt;# By default, Nikola generates RSS files for the website and for tags, and&lt;/span&gt;
&lt;span class="c1"&gt;# links to it.  Set this to False to disable everything RSS-related.&lt;/span&gt;
&lt;span class="c1"&gt;# GENERATE_RSS = True&lt;/span&gt;

&lt;span class="c1"&gt;# By default, Nikola does not generates Atom files for indexes and links to&lt;/span&gt;
&lt;span class="c1"&gt;# them. Generate Atom for tags by setting TAG_PAGES_ARE_INDEXES to True.&lt;/span&gt;
&lt;span class="c1"&gt;# Atom feeds are built based on INDEX_DISPLAY_POST_COUNT and not FEED_LENGTH&lt;/span&gt;
&lt;span class="c1"&gt;# Switch between plain-text summaries and full HTML content using the&lt;/span&gt;
&lt;span class="c1"&gt;# FEED_TEASER option. FEED_LINKS_APPEND_QUERY is also respected. Atom feeds&lt;/span&gt;
&lt;span class="c1"&gt;# are generated even for old indexes and have pagination link relations&lt;/span&gt;
&lt;span class="c1"&gt;# between each other. Old Atom feeds with no changes are marked as archived.&lt;/span&gt;
&lt;span class="c1"&gt;# GENERATE_ATOM = False&lt;/span&gt;

&lt;span class="c1"&gt;# Only include teasers in Atom and RSS feeds. Disabling include the full&lt;/span&gt;
&lt;span class="c1"&gt;# content. Defaults to True.&lt;/span&gt;
&lt;span class="c1"&gt;# FEED_TEASERS = True&lt;/span&gt;

&lt;span class="c1"&gt;# Strip HTML from Atom and RSS feed summaries and content. Defaults to False.&lt;/span&gt;
&lt;span class="c1"&gt;# FEED_PLAIN = False&lt;/span&gt;

&lt;span class="c1"&gt;# Number of posts in Atom and RSS feeds.&lt;/span&gt;
&lt;span class="c1"&gt;# FEED_LENGTH = 10&lt;/span&gt;

&lt;span class="c1"&gt;# RSS_LINK is a HTML fragment to link the RSS or Atom feeds. If set to None,&lt;/span&gt;
&lt;span class="c1"&gt;# the base.tmpl will use the feed Nikola generates. However, you may want to&lt;/span&gt;
&lt;span class="c1"&gt;# change it for a FeedBurner feed or something else.&lt;/span&gt;
&lt;span class="c1"&gt;# RSS_LINK = None&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;# Use content distribution networks for jQuery, twitter-bootstrap css and js,&lt;/span&gt;
&lt;span class="c1"&gt;# and html5shiv (for older versions of Internet Explorer)&lt;/span&gt;
&lt;span class="c1"&gt;# If this is True, jQuery and html5shiv are served from the Google CDN and&lt;/span&gt;
&lt;span class="c1"&gt;# Bootstrap is served from BootstrapCDN (provided by MaxCDN)&lt;/span&gt;
&lt;span class="c1"&gt;# Set this to False if you want to host your site without requiring access to&lt;/span&gt;
&lt;span class="c1"&gt;# external resources.&lt;/span&gt;
&lt;span class="c1"&gt;# USE_CDN = False&lt;/span&gt;

&lt;span class="c1"&gt;# Check for USE_CDN compatibility.&lt;/span&gt;
&lt;span class="c1"&gt;# If you are using custom themes, have configured the CSS properly and are&lt;/span&gt;
&lt;span class="c1"&gt;# receiving warnings about incompatibility but believe they are incorrect, you&lt;/span&gt;
&lt;span class="c1"&gt;# can set this to False.&lt;/span&gt;
&lt;span class="c1"&gt;# USE_CDN_WARNING = True&lt;/span&gt;

&lt;span class="c1"&gt;# Extra things you want in the pages HEAD tag. This will be added right&lt;/span&gt;
&lt;span class="c1"&gt;# before &amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;# (translatable)&lt;/span&gt;
&lt;span class="n"&gt;EXTRA_HEAD_DATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"""&amp;lt;link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png"&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png"&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png"&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;link rel="manifest" href="/site.webmanifest"&amp;gt;"""&lt;/span&gt;
&lt;span class="c1"&gt;# Google Analytics or whatever else you use. Added to the bottom of &amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;# in the default template (base.tmpl).&lt;/span&gt;
&lt;span class="c1"&gt;# (translatable)&lt;/span&gt;
&lt;span class="c1"&gt;# BODY_END = ""&lt;/span&gt;

&lt;span class="c1"&gt;# The possibility to extract metadata from the filename by using a&lt;/span&gt;
&lt;span class="c1"&gt;# regular expression.&lt;/span&gt;
&lt;span class="c1"&gt;# To make it work you need to name parts of your regular expression.&lt;/span&gt;
&lt;span class="c1"&gt;# The following names will be used to extract metadata:&lt;/span&gt;
&lt;span class="c1"&gt;# - title&lt;/span&gt;
&lt;span class="c1"&gt;# - slug&lt;/span&gt;
&lt;span class="c1"&gt;# - date&lt;/span&gt;
&lt;span class="c1"&gt;# - tags&lt;/span&gt;
&lt;span class="c1"&gt;# - link&lt;/span&gt;
&lt;span class="c1"&gt;# - description&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# An example re is the following:&lt;/span&gt;
&lt;span class="c1"&gt;# '.*\/(?P&amp;lt;date&amp;gt;\d{4}-\d{2}-\d{2})-(?P&amp;lt;slug&amp;gt;.*)-(?P&amp;lt;title&amp;gt;.*)\.rst'&lt;/span&gt;
&lt;span class="c1"&gt;# (Note the '.*\/' in the beginning -- matches source paths relative to conf.py)&lt;/span&gt;
&lt;span class="c1"&gt;# FILE_METADATA_REGEXP = None&lt;/span&gt;

&lt;span class="c1"&gt;# Should titles fetched from file metadata be unslugified (made prettier?)&lt;/span&gt;
&lt;span class="c1"&gt;# FILE_METADATA_UNSLUGIFY_TITLES = True&lt;/span&gt;

&lt;span class="c1"&gt;# If enabled, extract metadata from docinfo fields in reST documents.&lt;/span&gt;
&lt;span class="c1"&gt;# If your text files start with a level 1 heading, it will be treated as the&lt;/span&gt;
&lt;span class="c1"&gt;# document title and will be removed from the text.&lt;/span&gt;
&lt;span class="c1"&gt;# USE_REST_DOCINFO_METADATA = False&lt;/span&gt;

&lt;span class="c1"&gt;# If enabled, hide docinfo fields in reST document output&lt;/span&gt;
&lt;span class="c1"&gt;# HIDE_REST_DOCINFO = False&lt;/span&gt;

&lt;span class="c1"&gt;# Map metadata from other formats to Nikola names.&lt;/span&gt;
&lt;span class="c1"&gt;# Supported formats: yaml, toml, rest_docinfo, markdown_metadata&lt;/span&gt;
&lt;span class="c1"&gt;# METADATA_MAPPING = {}&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Example for Pelican compatibility:&lt;/span&gt;
&lt;span class="c1"&gt;# METADATA_MAPPING = {&lt;/span&gt;
&lt;span class="c1"&gt;#     "rest_docinfo": {"summary": "description", "modified": "updated"},&lt;/span&gt;
&lt;span class="c1"&gt;#     "markdown_metadata": {"summary": "description", "modified": "updated"}&lt;/span&gt;
&lt;span class="c1"&gt;# }&lt;/span&gt;
&lt;span class="c1"&gt;# Other examples: https://getnikola.com/handbook.html#mapping-metadata-from-other-formats&lt;/span&gt;

&lt;span class="c1"&gt;# Map metadata between types/values. (Runs after METADATA_MAPPING.)&lt;/span&gt;
&lt;span class="c1"&gt;# Supported formats: nikola, yaml, toml, rest_docinfo, markdown_metadata&lt;/span&gt;
&lt;span class="c1"&gt;# The value on the right should be a dict of callables.&lt;/span&gt;
&lt;span class="c1"&gt;# METADATA_VALUE_MAPPING = {}&lt;/span&gt;
&lt;span class="c1"&gt;# Examples:&lt;/span&gt;
&lt;span class="c1"&gt;# METADATA_VALUE_MAPPING = {&lt;/span&gt;
&lt;span class="c1"&gt;#     "yaml": {"keywords": lambda value: ', '.join(value)},  # yaml: 'keywords' list -&amp;gt; str&lt;/span&gt;
&lt;span class="c1"&gt;#     "nikola": {&lt;/span&gt;
&lt;span class="c1"&gt;#         "widgets": lambda value: value.split(', '),  # nikola: 'widgets' comma-separated string -&amp;gt; list&lt;/span&gt;
&lt;span class="c1"&gt;#         "tags": str.lower  # nikola: force lowercase 'tags' (input would be string)&lt;/span&gt;
&lt;span class="c1"&gt;#      }&lt;/span&gt;
&lt;span class="c1"&gt;# }&lt;/span&gt;

&lt;span class="c1"&gt;# Add any post types here that you want to be displayed without a title.&lt;/span&gt;
&lt;span class="c1"&gt;# If your theme supports it, the titles will not be shown.&lt;/span&gt;
&lt;span class="c1"&gt;# TYPES_TO_HIDE_TITLE = []&lt;/span&gt;

&lt;span class="c1"&gt;# Additional metadata that is added to a post when creating a new_post&lt;/span&gt;
&lt;span class="c1"&gt;# ADDITIONAL_METADATA = {}&lt;/span&gt;

&lt;span class="c1"&gt;# Nikola supports Twitter Card summaries, but they are disabled by default.&lt;/span&gt;
&lt;span class="c1"&gt;# They make it possible for you to attach media to Tweets that link&lt;/span&gt;
&lt;span class="c1"&gt;# to your content.&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Uncomment and modify to following lines to match your accounts.&lt;/span&gt;
&lt;span class="c1"&gt;# Images displayed come from the `previewimage` meta tag.&lt;/span&gt;
&lt;span class="c1"&gt;# You can specify the card type by using the `card` parameter in TWITTER_CARD.&lt;/span&gt;
&lt;span class="c1"&gt;# TWITTER_CARD = {&lt;/span&gt;
&lt;span class="c1"&gt;#     # 'use_twitter_cards': True,  # enable Twitter Cards&lt;/span&gt;
&lt;span class="c1"&gt;#     # 'card': 'summary',          # Card type, you can also use 'summary_large_image',&lt;/span&gt;
&lt;span class="c1"&gt;#                                   # see https://dev.twitter.com/cards/types&lt;/span&gt;
&lt;span class="c1"&gt;#     # 'site': '@website',         # twitter nick for the website&lt;/span&gt;
&lt;span class="c1"&gt;#     # 'creator': '@username',     # Username for the content creator / author.&lt;/span&gt;
&lt;span class="c1"&gt;# }&lt;/span&gt;

&lt;span class="c1"&gt;# Bundle JS and CSS into single files to make site loading faster in a HTTP/1.1&lt;/span&gt;
&lt;span class="c1"&gt;# environment but is not recommended for HTTP/2.0 when caching is used.&lt;/span&gt;
&lt;span class="c1"&gt;# Defaults to True.&lt;/span&gt;
&lt;span class="c1"&gt;# USE_BUNDLES = True&lt;/span&gt;

&lt;span class="c1"&gt;# Plugins you don't want to use. Be careful :-)&lt;/span&gt;
&lt;span class="n"&gt;DISABLED_PLUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"robots"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Special settings to disable only parts of the indexes plugin.&lt;/span&gt;
&lt;span class="c1"&gt;# Use with care.&lt;/span&gt;
&lt;span class="c1"&gt;# DISABLE_INDEXES = False&lt;/span&gt;
&lt;span class="c1"&gt;# DISABLE_MAIN_ATOM_FEED = False&lt;/span&gt;
&lt;span class="c1"&gt;# DISABLE_MAIN_RSS_FEED = False&lt;/span&gt;

&lt;span class="c1"&gt;# Add the absolute paths to directories containing plugins to use them.&lt;/span&gt;
&lt;span class="c1"&gt;# For example, the `plugins` directory of your clone of the Nikola plugins&lt;/span&gt;
&lt;span class="c1"&gt;# repository.&lt;/span&gt;
&lt;span class="c1"&gt;# EXTRA_PLUGINS_DIRS = []&lt;/span&gt;

&lt;span class="c1"&gt;# Add the absolute paths to directories containing themes to use them.&lt;/span&gt;
&lt;span class="c1"&gt;# For example, the `v7` directory of your clone of the Nikola themes&lt;/span&gt;
&lt;span class="c1"&gt;# repository.&lt;/span&gt;
&lt;span class="c1"&gt;# EXTRA_THEMES_DIRS = []&lt;/span&gt;

&lt;span class="c1"&gt;# List of regular expressions, links matching them will always be considered&lt;/span&gt;
&lt;span class="c1"&gt;# valid by "nikola check -l"&lt;/span&gt;
&lt;span class="c1"&gt;# LINK_CHECK_WHITELIST = []&lt;/span&gt;

&lt;span class="c1"&gt;# If set to True, enable optional hyphenation in your posts (requires pyphen)&lt;/span&gt;
&lt;span class="c1"&gt;# Enabling hyphenation has been shown to break math support in some cases,&lt;/span&gt;
&lt;span class="c1"&gt;# use with caution.&lt;/span&gt;
&lt;span class="c1"&gt;# HYPHENATE = False&lt;/span&gt;

&lt;span class="c1"&gt;# The &amp;lt;hN&amp;gt; tags in HTML generated by certain compilers (reST/Markdown)&lt;/span&gt;
&lt;span class="c1"&gt;# will be demoted by that much (1 → h1 will become h2 and so on)&lt;/span&gt;
&lt;span class="c1"&gt;# This was a hidden feature of the Markdown and reST compilers in the&lt;/span&gt;
&lt;span class="c1"&gt;# past.  Useful especially if your post titles are in &amp;lt;h1&amp;gt; tags too, for&lt;/span&gt;
&lt;span class="c1"&gt;# example.&lt;/span&gt;
&lt;span class="c1"&gt;# (defaults to 1.)&lt;/span&gt;
&lt;span class="c1"&gt;# DEMOTE_HEADERS = 1&lt;/span&gt;

&lt;span class="c1"&gt;# If you don’t like slugified file names ([a-z0-9] and a literal dash),&lt;/span&gt;
&lt;span class="c1"&gt;# and would prefer to use all the characters your file system allows.&lt;/span&gt;
&lt;span class="c1"&gt;# USE WITH CARE!  This is also not guaranteed to be perfect, and may&lt;/span&gt;
&lt;span class="c1"&gt;# sometimes crash Nikola, your web server, or eat your cat.&lt;/span&gt;
&lt;span class="c1"&gt;# USE_SLUGIFY = True&lt;/span&gt;

&lt;span class="c1"&gt;# If set to True, the tags 'draft', 'mathjax' and 'private' have special&lt;/span&gt;
&lt;span class="c1"&gt;# meaning. If set to False, these tags are handled like regular tags.&lt;/span&gt;
&lt;span class="n"&gt;USE_TAG_METADATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;

&lt;span class="c1"&gt;# If set to True, a warning is issued if one of the 'draft', 'mathjax'&lt;/span&gt;
&lt;span class="c1"&gt;# and 'private' tags are found in a post. Useful for checking that&lt;/span&gt;
&lt;span class="c1"&gt;# migration was successful.&lt;/span&gt;
&lt;span class="n"&gt;WARN_ABOUT_TAG_METADATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;

&lt;span class="c1"&gt;# Templates will use those filters, along with the defaults.&lt;/span&gt;
&lt;span class="c1"&gt;# Consult your engine's documentation on filters if you need help defining&lt;/span&gt;
&lt;span class="c1"&gt;# those.&lt;/span&gt;
&lt;span class="c1"&gt;# TEMPLATE_FILTERS = {}&lt;/span&gt;

&lt;span class="c1"&gt;# Put in global_context things you want available on all your templates.&lt;/span&gt;
&lt;span class="c1"&gt;# It can be anything, data, functions, modules, etc.&lt;/span&gt;
&lt;span class="c1"&gt;#GLOBAL_CONTEXT = {"p5_library_source": (&lt;/span&gt;
&lt;span class="c1"&gt;#    '&amp;lt;script'&lt;/span&gt;
&lt;span class="c1"&gt;#    ' src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.6.0/p5.min.js"'&lt;/span&gt;
&lt;span class="c1"&gt;#    ' integrity="sha512-3RlxD1bW34eFKPwj9gUXEWtdSMC59QqIqHnD8O/NoTwSJhgxRizdcFVQhUMFyTp5RwLTDL0Lbcqtl8b7bFAzog=="'&lt;/span&gt;
&lt;span class="c1"&gt;#    ' crossorigin="anonymous" referrerpolicy="no-referrer"&amp;gt;&amp;lt;/script&amp;gt;')}&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Add functions here and they will be called with template&lt;/span&gt;
&lt;span class="c1"&gt;# GLOBAL_CONTEXT as parameter when the template is about to be&lt;/span&gt;
&lt;span class="c1"&gt;# rendered&lt;/span&gt;
&lt;span class="n"&gt;GLOBAL_CONTEXT_FILLER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>nikola</category><guid>https://necromuralist.github.io/Beach-Pig-Thigh/posts/nikola-confpy/index.html</guid><pubDate>Tue, 20 Jun 2023 22:42:22 GMT</pubDate></item><item><title>P5 CDN URL</title><link>https://necromuralist.github.io/Beach-Pig-Thigh/posts/p5-cdn-url/index.html</link><dc:creator>The Cloistered Monkey</dc:creator><description>&lt;p&gt;
To change the script tag with the URL for the p5 CDN, put a new one in the &lt;code&gt;GLOBAL_CONTEXT&lt;/code&gt; dictionary defined in the &lt;code&gt;conf.py&lt;/code&gt; file using the &lt;code&gt;p5_library_source&lt;/code&gt; as the key and the new cag as the value. For example:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;GLOBAL_CONTEXT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"p5_library_source"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;'&amp;lt;script'&lt;/span&gt;
    &lt;span class="s1"&gt;' src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.6.0/p5.min.js"'&lt;/span&gt;
    &lt;span class="s1"&gt;' integrity="sha512-3RlxD1bW34eFKPwj9gUXEWtdSMC59QqIqHnD8O/NoTwSJhgxRizdcFVQhUMFyTp5RwLTDL0Lbcqtl8b7bFAzog=="'&lt;/span&gt;
    &lt;span class="s1"&gt;' crossorigin="anonymous" referrerpolicy="no-referrer"&amp;gt;&amp;lt;/script&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><category>p5</category><category>shortcode</category><category>template</category><guid>https://necromuralist.github.io/Beach-Pig-Thigh/posts/p5-cdn-url/index.html</guid><pubDate>Fri, 05 May 2023 22:19:31 GMT</pubDate></item><item><title>P5 Div Shortcode</title><link>https://necromuralist.github.io/Beach-Pig-Thigh/posts/p5-div-shortcode/index.html</link><dc:creator>The Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Beach-Pig-Thigh/posts/p5-div-shortcode/index.html#orge004912"&gt;The Shortcodes&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Beach-Pig-Thigh/posts/p5-div-shortcode/index.html#org82772cd"&gt;Mako&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Beach-Pig-Thigh/posts/p5-div-shortcode/index.html#org26978c3"&gt;Jinja&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Beach-Pig-Thigh/posts/p5-div-shortcode/index.html#org71540df"&gt;Links&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;

&lt;script src="https://necromuralist.github.io/Beach-Pig-Thigh/posts/p5-div-shortcode/noise_graph.js"&gt;&lt;/script&gt;

&lt;/p&gt;&lt;div class="p5js" id="e70fd042-noise-graph"&gt;&lt;/div&gt;



&lt;p&gt;
This is a test of the &lt;code&gt;p5div&lt;/code&gt; shortcode. For it to work (assuming you're using mako) you need to:
&lt;/p&gt;

&lt;div class="notecard" id="orgb8414b1"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;set up the &lt;code&gt;p5.tmpl&lt;/code&gt; template (in &lt;code&gt;themes/custom-mako/templates/&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;have &lt;code&gt;..template: p5.tmpl&lt;/code&gt; in the metadata for this post&lt;/li&gt;
&lt;li&gt;have &lt;code&gt;p5divmako.tmpl&lt;/code&gt; in a folder named &lt;code&gt;shortcodes&lt;/code&gt; at the root of the nikola folder&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;

&lt;div class="notecard" id="org98053b9"&gt;
&lt;p&gt;
&lt;b&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
I'll be using the names based on the idea that we're using the &lt;code&gt;mako&lt;/code&gt; template engine. If we were using &lt;code&gt;jinja&lt;/code&gt; the path for the templates would be &lt;code&gt;themes/custom-jinja/templates/&lt;/code&gt; or whatever else name we used.
&lt;/p&gt;

&lt;/div&gt;

&lt;div id="outline-container-orge004912" class="outline-2"&gt;
&lt;h2 id="orge004912"&gt;The Shortcodes&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge004912"&gt;
&lt;p&gt;
There actually needs to be two different shortcodes, one for jinja and one for mako. This repository is using mako (as does &lt;a href="https://necromuralist.github.io"&gt;https://necromuralist.github.io&lt;/a&gt;) but &lt;a href="https://necromuralist.github.io/Ape-Iron/"&gt;ape-iron&lt;/a&gt; is using jinja. It's a little too convoluted to keep switching back and forth so I'm mostly going to be relying on ape-iron to test the jinja version (although I really should figure out an easy way to test both).
&lt;/p&gt;

&lt;p&gt;
The shortcode creates two HTML tags:
&lt;/p&gt;

&lt;div class="notecard" id="org05b1a0e"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;a script tag that needs the path to the source p5js file&lt;/li&gt;
&lt;li&gt;a div tag that needs the ID to use so that the p5 sketch can be put inside it&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;

&lt;p&gt;
I was originally setting the &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;language&lt;/code&gt; attributes of the &lt;code&gt;script&lt;/code&gt; tag, but apparently, according to the Mozilla Developers Network (MDN) the &lt;code&gt;language&lt;/code&gt; attribute was deprecated a long time ago:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
Like the type attribute, this attribute identifies the scripting language in use. Unlike the type attribute, however, this attribute's possible values were never standardized. The type attribute should be used instead.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
And the default &lt;code&gt;type&lt;/code&gt; is javascript so you don't need to use it if it's a regular script. Quoting the MDN again on what it means when &lt;code&gt;type&lt;/code&gt; isn't set or is set to an empty string:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
[It] indicates that the script is a "classic script", containing JavaScript code. Authors are encouraged to omit the attribute if the script refers to JavaScript code rather than specify a MIME type. 
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="notecard" id="orgdee2da7"&gt;
&lt;p&gt;
&lt;b&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
I was setting the class for the &lt;code&gt;div&lt;/code&gt; to "p5js" but it turns out that &lt;code&gt;p5&lt;/code&gt; already adds a class, "p5Canvas", so w can add the styling to that class instead and don't need another class.
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org82772cd" class="outline-3"&gt;
&lt;h3 id="org82772cd"&gt;Mako&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org82772cd"&gt;
&lt;p&gt;
I don't see an easy way to set which shortcodes folder to use so I'm going to go with adding "mako" to the end of the shortcodes meant for the mako engine and not putting a suffix on the ones meant for jinja. This shortcode will go into &lt;code&gt;shortcodes/p5divmako.tmpl&lt;/code&gt;: 
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"${source}"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"p5js"&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"${divid}"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
To use this shortcode you add something that looks like this to a page or post.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nv"&gt;p5divmako&lt;/span&gt; &lt;span class="nv"&gt;divid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"e70fd042-noise-graph"&lt;/span&gt; &lt;span class="nv"&gt;source&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"noise_graph.js"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This assumes that the sketch is in &lt;code&gt;files/posts/&amp;lt;slug&amp;gt;/noise_graph.js&lt;/code&gt; and that the p5 code is adding the sketch to  "e70fd042-noise-graph". Meaning that there's something like this in the in the &lt;code&gt;noise_graph.js&lt;/code&gt; file:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;p5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;noise_graph&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"e70fd042-noise-graph"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Where &lt;code&gt;noise_graph&lt;/code&gt; is the name of the function in &lt;code&gt;noise_graph.js&lt;/code&gt; that runs the sketch.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org26978c3" class="outline-3"&gt;
&lt;h3 id="org26978c3"&gt;Jinja&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org26978c3"&gt;
&lt;p&gt;
Here's the jinja version of the shortcode. It's going to go into &lt;code&gt;shortcodes/p5div.tmpl&lt;/code&gt;.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;source&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"p5js"&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;divid&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
To use it you use the same syntax as the mako-based shortcode, just change the name of the shortcode to &lt;code&gt;p5div.tmpl&lt;/code&gt;.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nv"&gt;p5div&lt;/span&gt; &lt;span class="nv"&gt;divid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"e70fd042-noise-graph"&lt;/span&gt; &lt;span class="nv"&gt;source&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"noise_graph.js"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org71540df" class="outline-2"&gt;
&lt;h2 id="org71540df"&gt;Links&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org71540df"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&amp;lt;script&amp;gt;: The Script element - HTML: HyperText Markup Language | MDN [Internet]. 2023 [cited 2023 Jun 20]. Available from: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script"&gt;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>p5</category><category>shortcode</category><category>template</category><guid>https://necromuralist.github.io/Beach-Pig-Thigh/posts/p5-div-shortcode/index.html</guid><pubDate>Fri, 05 May 2023 22:19:31 GMT</pubDate></item></channel></rss>